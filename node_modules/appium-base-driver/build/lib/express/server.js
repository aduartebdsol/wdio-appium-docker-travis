"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.server = server;
exports.configureServer = configureServer;
exports.normalizeBasePath = normalizeBasePath;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _path = _interopRequireDefault(require("path"));

var _express = _interopRequireDefault(require("express"));

var _http = _interopRequireDefault(require("http"));

var _serveFavicon = _interopRequireDefault(require("serve-favicon"));

var _bodyParser = _interopRequireDefault(require("body-parser"));

var _methodOverride = _interopRequireDefault(require("method-override"));

var _logger = _interopRequireDefault(require("./logger"));

var _expressLogging = require("./express-logging");

var _middleware = require("./middleware");

var _static = require("./static");

var _crash = require("./crash");

var _websocket = require("./websocket");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _protocol = require("../protocol");

var _events = require("events");

const KEEP_ALIVE_TIMEOUT_MS = 60 * 10 * 1000;

async function server(opts = {}) {
  const {
    routeConfiguringFunction,
    port,
    hostname = null,
    allowCors = true,
    basePath = _protocol.DEFAULT_BASE_PATH
  } = opts;
  const app = (0, _express.default)();

  let httpServer = _http.default.createServer(app);

  const serverStateNotifier = new _events.EventEmitter();
  let isServerClosed = false;
  httpServer.addWebSocketHandler = _websocket.addWebSocketHandler;
  httpServer.removeWebSocketHandler = _websocket.removeWebSocketHandler;
  httpServer.removeAllWebSocketHandlers = _websocket.removeAllWebSocketHandlers;
  httpServer.getWebSocketHandlers = _websocket.getWebSocketHandlers;
  const close = httpServer.close.bind(httpServer);

  httpServer.close = async () => await new _bluebird.default((resolve, reject) => {
    isServerClosed = true;
    serverStateNotifier.emit('shutdown');
    httpServer.on('close', resolve);
    close(err => {
      if (err) reject(err);
    });
  });

  return await new _bluebird.default((resolve, reject) => {
    httpServer.on('error', err => {
      if (err.code === 'EADDRNOTAVAIL') {
        _logger.default.error('Could not start REST http interface listener. ' + 'Requested address is not available.');
      } else {
        _logger.default.error('Could not start REST http interface listener. The requested ' + 'port may already be in use. Please make sure there is no ' + 'other instance of this server running already.');
      }

      reject(err);
    });
    httpServer.on('connection', socket => {
      socket.setTimeout(KEEP_ALIVE_TIMEOUT_MS);
      socket.on('error', reject);

      function destroy() {
        if (socket._openReqCount === 0) {
          socket.destroy();
        }
      }

      socket._openReqCount = 0;
      socket.once('close', () => serverStateNotifier.removeListener('shutdown', destroy));
      serverStateNotifier.once('shutdown', destroy);
    });
    httpServer.on('request', function (req, res) {
      const socket = req.connection || req.socket;
      socket._openReqCount++;
      res.on('finish', function () {
        socket._openReqCount--;

        if (isServerClosed && socket._openReqCount === 0) {
          socket.destroy();
        }
      });
    });
    configureServer(app, routeConfiguringFunction, allowCors, basePath);
    let serverArgs = [port];

    if (hostname) {
      serverArgs.push(hostname);
    }

    httpServer.listen(...serverArgs, err => {
      if (err) {
        reject(err);
      }

      resolve(httpServer);
    });
    httpServer.keepAliveTimeout = KEEP_ALIVE_TIMEOUT_MS;
    httpServer.headersTimeout = KEEP_ALIVE_TIMEOUT_MS + 5 * 1000;
  });
}

function normalizeBasePath(basePath) {
  if (!_lodash.default.isString(basePath)) {
    throw new Error(`Invalid path prefix ${basePath}`);
  }

  basePath = basePath.replace(/\/$/, '');

  if (basePath !== '' && basePath[0] !== '/') {
    basePath = `/${basePath}`;
  }

  return basePath;
}

function configureServer(app, routeConfiguringFunction, allowCors = true, basePath = _protocol.DEFAULT_BASE_PATH) {
  basePath = normalizeBasePath(basePath);
  app.use(_expressLogging.endLogFormatter);
  app.use((0, _serveFavicon.default)(_path.default.resolve(_static.STATIC_DIR, 'favicon.ico')));
  app.use(_express.default.static(_static.STATIC_DIR));
  app.use(`${basePath}/produce_error`, _crash.produceError);
  app.use(`${basePath}/crash`, _crash.produceCrash);

  if (allowCors) {
    app.use(_middleware.allowCrossDomain);
  } else {
    app.use((0, _middleware.allowCrossDomainAsyncExecute)(basePath));
  }

  app.use(_middleware.handleIdempotency);
  app.use((0, _middleware.fixPythonContentType)(basePath));
  app.use(_middleware.defaultToJSONContentType);
  app.use(_bodyParser.default.urlencoded({
    extended: true
  }));
  app.use((0, _methodOverride.default)());
  app.use(_middleware.catch4XXHandler);
  app.use(_middleware.catchAllHandler);
  app.use(_bodyParser.default.json({
    limit: '1gb'
  }));
  app.use(_expressLogging.startLogFormatter);
  routeConfiguringFunction(app, basePath);
  app.all('/welcome', _static.welcome);
  app.all('/test/guinea-pig', _static.guineaPig);
  app.all('/test/guinea-pig-scrollable', _static.guineaPigScrollable);
  app.all('/test/guinea-pig-app-banner', _static.guineaPigAppBanner);
  app.use(_middleware.catch404Handler);
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9leHByZXNzL3NlcnZlci5qcyJdLCJuYW1lcyI6WyJLRUVQX0FMSVZFX1RJTUVPVVRfTVMiLCJzZXJ2ZXIiLCJvcHRzIiwicm91dGVDb25maWd1cmluZ0Z1bmN0aW9uIiwicG9ydCIsImhvc3RuYW1lIiwiYWxsb3dDb3JzIiwiYmFzZVBhdGgiLCJERUZBVUxUX0JBU0VfUEFUSCIsImFwcCIsImh0dHBTZXJ2ZXIiLCJodHRwIiwiY3JlYXRlU2VydmVyIiwic2VydmVyU3RhdGVOb3RpZmllciIsIkV2ZW50RW1pdHRlciIsImlzU2VydmVyQ2xvc2VkIiwiYWRkV2ViU29ja2V0SGFuZGxlciIsInJlbW92ZVdlYlNvY2tldEhhbmRsZXIiLCJyZW1vdmVBbGxXZWJTb2NrZXRIYW5kbGVycyIsImdldFdlYlNvY2tldEhhbmRsZXJzIiwiY2xvc2UiLCJiaW5kIiwiQiIsInJlc29sdmUiLCJyZWplY3QiLCJlbWl0Iiwib24iLCJlcnIiLCJjb2RlIiwibG9nIiwiZXJyb3IiLCJzb2NrZXQiLCJzZXRUaW1lb3V0IiwiZGVzdHJveSIsIl9vcGVuUmVxQ291bnQiLCJvbmNlIiwicmVtb3ZlTGlzdGVuZXIiLCJyZXEiLCJyZXMiLCJjb25uZWN0aW9uIiwiY29uZmlndXJlU2VydmVyIiwic2VydmVyQXJncyIsInB1c2giLCJsaXN0ZW4iLCJrZWVwQWxpdmVUaW1lb3V0IiwiaGVhZGVyc1RpbWVvdXQiLCJub3JtYWxpemVCYXNlUGF0aCIsIl8iLCJpc1N0cmluZyIsIkVycm9yIiwicmVwbGFjZSIsInVzZSIsImVuZExvZ0Zvcm1hdHRlciIsInBhdGgiLCJTVEFUSUNfRElSIiwiZXhwcmVzcyIsInN0YXRpYyIsInByb2R1Y2VFcnJvciIsInByb2R1Y2VDcmFzaCIsImFsbG93Q3Jvc3NEb21haW4iLCJoYW5kbGVJZGVtcG90ZW5jeSIsImRlZmF1bHRUb0pTT05Db250ZW50VHlwZSIsImJvZHlQYXJzZXIiLCJ1cmxlbmNvZGVkIiwiZXh0ZW5kZWQiLCJjYXRjaDRYWEhhbmRsZXIiLCJjYXRjaEFsbEhhbmRsZXIiLCJqc29uIiwibGltaXQiLCJzdGFydExvZ0Zvcm1hdHRlciIsImFsbCIsIndlbGNvbWUiLCJndWluZWFQaWciLCJndWluZWFQaWdTY3JvbGxhYmxlIiwiZ3VpbmVhUGlnQXBwQmFubmVyIiwiY2F0Y2g0MDRIYW5kbGVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBS0E7O0FBQ0E7O0FBQ0E7O0FBSUE7O0FBQ0E7O0FBQ0E7O0FBR0EsTUFBTUEscUJBQXFCLEdBQUcsS0FBSyxFQUFMLEdBQVUsSUFBeEM7O0FBR0EsZUFBZUMsTUFBZixDQUF1QkMsSUFBSSxHQUFHLEVBQTlCLEVBQWtDO0FBQ2hDLFFBQU07QUFDSkMsSUFBQUEsd0JBREk7QUFFSkMsSUFBQUEsSUFGSTtBQUdKQyxJQUFBQSxRQUFRLEdBQUcsSUFIUDtBQUlKQyxJQUFBQSxTQUFTLEdBQUcsSUFKUjtBQUtKQyxJQUFBQSxRQUFRLEdBQUdDO0FBTFAsTUFNRk4sSUFOSjtBQVNBLFFBQU1PLEdBQUcsR0FBRyx1QkFBWjs7QUFDQSxNQUFJQyxVQUFVLEdBQUdDLGNBQUtDLFlBQUwsQ0FBa0JILEdBQWxCLENBQWpCOztBQUNBLFFBQU1JLG1CQUFtQixHQUFHLElBQUlDLG9CQUFKLEVBQTVCO0FBQ0EsTUFBSUMsY0FBYyxHQUFHLEtBQXJCO0FBQ0FMLEVBQUFBLFVBQVUsQ0FBQ00sbUJBQVgsR0FBaUNBLDhCQUFqQztBQUNBTixFQUFBQSxVQUFVLENBQUNPLHNCQUFYLEdBQW9DQSxpQ0FBcEM7QUFDQVAsRUFBQUEsVUFBVSxDQUFDUSwwQkFBWCxHQUF3Q0EscUNBQXhDO0FBQ0FSLEVBQUFBLFVBQVUsQ0FBQ1Msb0JBQVgsR0FBa0NBLCtCQUFsQztBQUlBLFFBQU1DLEtBQUssR0FBR1YsVUFBVSxDQUFDVSxLQUFYLENBQWlCQyxJQUFqQixDQUFzQlgsVUFBdEIsQ0FBZDs7QUFDQUEsRUFBQUEsVUFBVSxDQUFDVSxLQUFYLEdBQW1CLFlBQVksTUFBTSxJQUFJRSxpQkFBSixDQUFNLENBQUNDLE9BQUQsRUFBVUMsTUFBVixLQUFxQjtBQUU5RFQsSUFBQUEsY0FBYyxHQUFHLElBQWpCO0FBQ0FGLElBQUFBLG1CQUFtQixDQUFDWSxJQUFwQixDQUF5QixVQUF6QjtBQUNBZixJQUFBQSxVQUFVLENBQUNnQixFQUFYLENBQWMsT0FBZCxFQUF1QkgsT0FBdkI7QUFDQUgsSUFBQUEsS0FBSyxDQUFFTyxHQUFELElBQVM7QUFDYixVQUFJQSxHQUFKLEVBQVNILE1BQU0sQ0FBQ0csR0FBRCxDQUFOO0FBQ1YsS0FGSSxDQUFMO0FBR0QsR0FSb0MsQ0FBckM7O0FBVUEsU0FBTyxNQUFNLElBQUlMLGlCQUFKLENBQU0sQ0FBQ0MsT0FBRCxFQUFVQyxNQUFWLEtBQXFCO0FBQ3RDZCxJQUFBQSxVQUFVLENBQUNnQixFQUFYLENBQWMsT0FBZCxFQUF3QkMsR0FBRCxJQUFTO0FBQzlCLFVBQUlBLEdBQUcsQ0FBQ0MsSUFBSixLQUFhLGVBQWpCLEVBQWtDO0FBQ2hDQyx3QkFBSUMsS0FBSixDQUFVLG1EQUNBLHFDQURWO0FBRUQsT0FIRCxNQUdPO0FBQ0xELHdCQUFJQyxLQUFKLENBQVUsaUVBQ0EsMkRBREEsR0FFQSxnREFGVjtBQUdEOztBQUNETixNQUFBQSxNQUFNLENBQUNHLEdBQUQsQ0FBTjtBQUNELEtBVkQ7QUFXQWpCLElBQUFBLFVBQVUsQ0FBQ2dCLEVBQVgsQ0FBYyxZQUFkLEVBQTZCSyxNQUFELElBQVk7QUFDdENBLE1BQUFBLE1BQU0sQ0FBQ0MsVUFBUCxDQUFrQmhDLHFCQUFsQjtBQUNBK0IsTUFBQUEsTUFBTSxDQUFDTCxFQUFQLENBQVUsT0FBVixFQUFtQkYsTUFBbkI7O0FBRUEsZUFBU1MsT0FBVCxHQUFvQjtBQUNsQixZQUFJRixNQUFNLENBQUNHLGFBQVAsS0FBeUIsQ0FBN0IsRUFBZ0M7QUFDOUJILFVBQUFBLE1BQU0sQ0FBQ0UsT0FBUDtBQUNEO0FBQ0Y7O0FBQ0RGLE1BQUFBLE1BQU0sQ0FBQ0csYUFBUCxHQUF1QixDQUF2QjtBQUNBSCxNQUFBQSxNQUFNLENBQUNJLElBQVAsQ0FBWSxPQUFaLEVBQXFCLE1BQU10QixtQkFBbUIsQ0FBQ3VCLGNBQXBCLENBQW1DLFVBQW5DLEVBQStDSCxPQUEvQyxDQUEzQjtBQUNBcEIsTUFBQUEsbUJBQW1CLENBQUNzQixJQUFwQixDQUF5QixVQUF6QixFQUFxQ0YsT0FBckM7QUFDRCxLQVpEO0FBYUF2QixJQUFBQSxVQUFVLENBQUNnQixFQUFYLENBQWMsU0FBZCxFQUF5QixVQUFVVyxHQUFWLEVBQWVDLEdBQWYsRUFBb0I7QUFDM0MsWUFBTVAsTUFBTSxHQUFHTSxHQUFHLENBQUNFLFVBQUosSUFBa0JGLEdBQUcsQ0FBQ04sTUFBckM7QUFDQUEsTUFBQUEsTUFBTSxDQUFDRyxhQUFQO0FBQ0FJLE1BQUFBLEdBQUcsQ0FBQ1osRUFBSixDQUFPLFFBQVAsRUFBaUIsWUFBWTtBQUMzQkssUUFBQUEsTUFBTSxDQUFDRyxhQUFQOztBQUNBLFlBQUluQixjQUFjLElBQUlnQixNQUFNLENBQUNHLGFBQVAsS0FBeUIsQ0FBL0MsRUFBa0Q7QUFDaERILFVBQUFBLE1BQU0sQ0FBQ0UsT0FBUDtBQUNEO0FBQ0YsT0FMRDtBQU1ELEtBVEQ7QUFVQU8sSUFBQUEsZUFBZSxDQUFDL0IsR0FBRCxFQUFNTix3QkFBTixFQUFnQ0csU0FBaEMsRUFBMkNDLFFBQTNDLENBQWY7QUFFQSxRQUFJa0MsVUFBVSxHQUFHLENBQUNyQyxJQUFELENBQWpCOztBQUNBLFFBQUlDLFFBQUosRUFBYztBQUdab0MsTUFBQUEsVUFBVSxDQUFDQyxJQUFYLENBQWdCckMsUUFBaEI7QUFDRDs7QUFDREssSUFBQUEsVUFBVSxDQUFDaUMsTUFBWCxDQUFrQixHQUFHRixVQUFyQixFQUFrQ2QsR0FBRCxJQUFTO0FBQ3hDLFVBQUlBLEdBQUosRUFBUztBQUNQSCxRQUFBQSxNQUFNLENBQUNHLEdBQUQsQ0FBTjtBQUNEOztBQUNESixNQUFBQSxPQUFPLENBQUNiLFVBQUQsQ0FBUDtBQUNELEtBTEQ7QUFNQUEsSUFBQUEsVUFBVSxDQUFDa0MsZ0JBQVgsR0FBOEI1QyxxQkFBOUI7QUFFQVUsSUFBQUEsVUFBVSxDQUFDbUMsY0FBWCxHQUE0QjdDLHFCQUFxQixHQUFHLElBQUksSUFBeEQ7QUFDRCxHQXBEWSxDQUFiO0FBcUREOztBQUVELFNBQVM4QyxpQkFBVCxDQUE0QnZDLFFBQTVCLEVBQXNDO0FBQ3BDLE1BQUksQ0FBQ3dDLGdCQUFFQyxRQUFGLENBQVd6QyxRQUFYLENBQUwsRUFBMkI7QUFDekIsVUFBTSxJQUFJMEMsS0FBSixDQUFXLHVCQUFzQjFDLFFBQVMsRUFBMUMsQ0FBTjtBQUNEOztBQUlEQSxFQUFBQSxRQUFRLEdBQUdBLFFBQVEsQ0FBQzJDLE9BQVQsQ0FBaUIsS0FBakIsRUFBd0IsRUFBeEIsQ0FBWDs7QUFJQSxNQUFJM0MsUUFBUSxLQUFLLEVBQWIsSUFBbUJBLFFBQVEsQ0FBQyxDQUFELENBQVIsS0FBZ0IsR0FBdkMsRUFBNEM7QUFDMUNBLElBQUFBLFFBQVEsR0FBSSxJQUFHQSxRQUFTLEVBQXhCO0FBQ0Q7O0FBRUQsU0FBT0EsUUFBUDtBQUNEOztBQUVELFNBQVNpQyxlQUFULENBQTBCL0IsR0FBMUIsRUFBK0JOLHdCQUEvQixFQUF5REcsU0FBUyxHQUFHLElBQXJFLEVBQTJFQyxRQUFRLEdBQUdDLDJCQUF0RixFQUF5RztBQUN2R0QsRUFBQUEsUUFBUSxHQUFHdUMsaUJBQWlCLENBQUN2QyxRQUFELENBQTVCO0FBRUFFLEVBQUFBLEdBQUcsQ0FBQzBDLEdBQUosQ0FBUUMsK0JBQVI7QUFHQTNDLEVBQUFBLEdBQUcsQ0FBQzBDLEdBQUosQ0FBUSwyQkFBUUUsY0FBSzlCLE9BQUwsQ0FBYStCLGtCQUFiLEVBQXlCLGFBQXpCLENBQVIsQ0FBUjtBQUNBN0MsRUFBQUEsR0FBRyxDQUFDMEMsR0FBSixDQUFRSSxpQkFBUUMsTUFBUixDQUFlRixrQkFBZixDQUFSO0FBR0E3QyxFQUFBQSxHQUFHLENBQUMwQyxHQUFKLENBQVMsR0FBRTVDLFFBQVMsZ0JBQXBCLEVBQXFDa0QsbUJBQXJDO0FBQ0FoRCxFQUFBQSxHQUFHLENBQUMwQyxHQUFKLENBQVMsR0FBRTVDLFFBQVMsUUFBcEIsRUFBNkJtRCxtQkFBN0I7O0FBR0EsTUFBSXBELFNBQUosRUFBZTtBQUNiRyxJQUFBQSxHQUFHLENBQUMwQyxHQUFKLENBQVFRLDRCQUFSO0FBQ0QsR0FGRCxNQUVPO0FBQ0xsRCxJQUFBQSxHQUFHLENBQUMwQyxHQUFKLENBQVEsOENBQTZCNUMsUUFBN0IsQ0FBUjtBQUNEOztBQUNERSxFQUFBQSxHQUFHLENBQUMwQyxHQUFKLENBQVFTLDZCQUFSO0FBQ0FuRCxFQUFBQSxHQUFHLENBQUMwQyxHQUFKLENBQVEsc0NBQXFCNUMsUUFBckIsQ0FBUjtBQUNBRSxFQUFBQSxHQUFHLENBQUMwQyxHQUFKLENBQVFVLG9DQUFSO0FBQ0FwRCxFQUFBQSxHQUFHLENBQUMwQyxHQUFKLENBQVFXLG9CQUFXQyxVQUFYLENBQXNCO0FBQUNDLElBQUFBLFFBQVEsRUFBRTtBQUFYLEdBQXRCLENBQVI7QUFDQXZELEVBQUFBLEdBQUcsQ0FBQzBDLEdBQUosQ0FBUSw4QkFBUjtBQUNBMUMsRUFBQUEsR0FBRyxDQUFDMEMsR0FBSixDQUFRYywyQkFBUjtBQUNBeEQsRUFBQUEsR0FBRyxDQUFDMEMsR0FBSixDQUFRZSwyQkFBUjtBQUdBekQsRUFBQUEsR0FBRyxDQUFDMEMsR0FBSixDQUFRVyxvQkFBV0ssSUFBWCxDQUFnQjtBQUFDQyxJQUFBQSxLQUFLLEVBQUU7QUFBUixHQUFoQixDQUFSO0FBR0EzRCxFQUFBQSxHQUFHLENBQUMwQyxHQUFKLENBQVFrQixpQ0FBUjtBQUVBbEUsRUFBQUEsd0JBQXdCLENBQUNNLEdBQUQsRUFBTUYsUUFBTixDQUF4QjtBQUdBRSxFQUFBQSxHQUFHLENBQUM2RCxHQUFKLENBQVEsVUFBUixFQUFvQkMsZUFBcEI7QUFDQTlELEVBQUFBLEdBQUcsQ0FBQzZELEdBQUosQ0FBUSxrQkFBUixFQUE0QkUsaUJBQTVCO0FBQ0EvRCxFQUFBQSxHQUFHLENBQUM2RCxHQUFKLENBQVEsNkJBQVIsRUFBdUNHLDJCQUF2QztBQUNBaEUsRUFBQUEsR0FBRyxDQUFDNkQsR0FBSixDQUFRLDZCQUFSLEVBQXVDSSwwQkFBdkM7QUFHQWpFLEVBQUFBLEdBQUcsQ0FBQzBDLEdBQUosQ0FBUXdCLDJCQUFSO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgZXhwcmVzcyBmcm9tICdleHByZXNzJztcbmltcG9ydCBodHRwIGZyb20gJ2h0dHAnO1xuaW1wb3J0IGZhdmljb24gZnJvbSAnc2VydmUtZmF2aWNvbic7XG5pbXBvcnQgYm9keVBhcnNlciBmcm9tICdib2R5LXBhcnNlcic7XG5pbXBvcnQgbWV0aG9kT3ZlcnJpZGUgZnJvbSAnbWV0aG9kLW92ZXJyaWRlJztcbmltcG9ydCBsb2cgZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IHsgc3RhcnRMb2dGb3JtYXR0ZXIsIGVuZExvZ0Zvcm1hdHRlciB9IGZyb20gJy4vZXhwcmVzcy1sb2dnaW5nJztcbmltcG9ydCB7XG4gIGFsbG93Q3Jvc3NEb21haW4sIGZpeFB5dGhvbkNvbnRlbnRUeXBlLCBkZWZhdWx0VG9KU09OQ29udGVudFR5cGUsXG4gIGNhdGNoQWxsSGFuZGxlciwgY2F0Y2g0MDRIYW5kbGVyLCBjYXRjaDRYWEhhbmRsZXIsXG4gIGFsbG93Q3Jvc3NEb21haW5Bc3luY0V4ZWN1dGUsIGhhbmRsZUlkZW1wb3RlbmN5LFxufSBmcm9tICcuL21pZGRsZXdhcmUnO1xuaW1wb3J0IHsgZ3VpbmVhUGlnLCBndWluZWFQaWdTY3JvbGxhYmxlLCBndWluZWFQaWdBcHBCYW5uZXIsIHdlbGNvbWUsIFNUQVRJQ19ESVIgfSBmcm9tICcuL3N0YXRpYyc7XG5pbXBvcnQgeyBwcm9kdWNlRXJyb3IsIHByb2R1Y2VDcmFzaCB9IGZyb20gJy4vY3Jhc2gnO1xuaW1wb3J0IHtcbiAgYWRkV2ViU29ja2V0SGFuZGxlciwgcmVtb3ZlV2ViU29ja2V0SGFuZGxlciwgcmVtb3ZlQWxsV2ViU29ja2V0SGFuZGxlcnMsXG4gIGdldFdlYlNvY2tldEhhbmRsZXJzXG59IGZyb20gJy4vd2Vic29ja2V0JztcbmltcG9ydCBCIGZyb20gJ2JsdWViaXJkJztcbmltcG9ydCB7IERFRkFVTFRfQkFTRV9QQVRIIH0gZnJvbSAnLi4vcHJvdG9jb2wnO1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnZXZlbnRzJztcblxuXG5jb25zdCBLRUVQX0FMSVZFX1RJTUVPVVRfTVMgPSA2MCAqIDEwICogMTAwMDsgLy8gMTAgbWludXRlc1xuXG5cbmFzeW5jIGZ1bmN0aW9uIHNlcnZlciAob3B0cyA9IHt9KSB7XG4gIGNvbnN0IHtcbiAgICByb3V0ZUNvbmZpZ3VyaW5nRnVuY3Rpb24sXG4gICAgcG9ydCxcbiAgICBob3N0bmFtZSA9IG51bGwsXG4gICAgYWxsb3dDb3JzID0gdHJ1ZSxcbiAgICBiYXNlUGF0aCA9IERFRkFVTFRfQkFTRV9QQVRILFxuICB9ID0gb3B0cztcblxuICAvLyBjcmVhdGUgdGhlIGFjdHVhbCBodHRwIHNlcnZlclxuICBjb25zdCBhcHAgPSBleHByZXNzKCk7XG4gIGxldCBodHRwU2VydmVyID0gaHR0cC5jcmVhdGVTZXJ2ZXIoYXBwKTtcbiAgY29uc3Qgc2VydmVyU3RhdGVOb3RpZmllciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgbGV0IGlzU2VydmVyQ2xvc2VkID0gZmFsc2U7XG4gIGh0dHBTZXJ2ZXIuYWRkV2ViU29ja2V0SGFuZGxlciA9IGFkZFdlYlNvY2tldEhhbmRsZXI7XG4gIGh0dHBTZXJ2ZXIucmVtb3ZlV2ViU29ja2V0SGFuZGxlciA9IHJlbW92ZVdlYlNvY2tldEhhbmRsZXI7XG4gIGh0dHBTZXJ2ZXIucmVtb3ZlQWxsV2ViU29ja2V0SGFuZGxlcnMgPSByZW1vdmVBbGxXZWJTb2NrZXRIYW5kbGVycztcbiAgaHR0cFNlcnZlci5nZXRXZWJTb2NrZXRIYW5kbGVycyA9IGdldFdlYlNvY2tldEhhbmRsZXJzO1xuXG4gIC8vIGh0dHAuU2VydmVyLmNsb3NlKCkgb25seSBzdG9wcyBuZXcgY29ubmVjdGlvbnMsIGJ1dCB3ZSBuZWVkIHRvIHdhaXQgdW50aWxcbiAgLy8gYWxsIGNvbm5lY3Rpb25zIGFyZSBjbG9zZWQgYW5kIHRoZSBgY2xvc2VgIGV2ZW50IGlzIGVtaXR0ZWRcbiAgY29uc3QgY2xvc2UgPSBodHRwU2VydmVyLmNsb3NlLmJpbmQoaHR0cFNlcnZlcik7XG4gIGh0dHBTZXJ2ZXIuY2xvc2UgPSBhc3luYyAoKSA9PiBhd2FpdCBuZXcgQigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlLXYwLngtYXJjaGl2ZS9pc3N1ZXMvOTA2NiNpc3N1ZWNvbW1lbnQtMTI0MjEwNTc2XG4gICAgaXNTZXJ2ZXJDbG9zZWQgPSB0cnVlO1xuICAgIHNlcnZlclN0YXRlTm90aWZpZXIuZW1pdCgnc2h1dGRvd24nKTtcbiAgICBodHRwU2VydmVyLm9uKCdjbG9zZScsIHJlc29sdmUpO1xuICAgIGNsb3NlKChlcnIpID0+IHtcbiAgICAgIGlmIChlcnIpIHJlamVjdChlcnIpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGN1cmx5XG4gICAgfSk7XG4gIH0pO1xuXG4gIHJldHVybiBhd2FpdCBuZXcgQigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgaHR0cFNlcnZlci5vbignZXJyb3InLCAoZXJyKSA9PiB7XG4gICAgICBpZiAoZXJyLmNvZGUgPT09ICdFQUREUk5PVEFWQUlMJykge1xuICAgICAgICBsb2cuZXJyb3IoJ0NvdWxkIG5vdCBzdGFydCBSRVNUIGh0dHAgaW50ZXJmYWNlIGxpc3RlbmVyLiAnICtcbiAgICAgICAgICAgICAgICAgICdSZXF1ZXN0ZWQgYWRkcmVzcyBpcyBub3QgYXZhaWxhYmxlLicpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG9nLmVycm9yKCdDb3VsZCBub3Qgc3RhcnQgUkVTVCBodHRwIGludGVyZmFjZSBsaXN0ZW5lci4gVGhlIHJlcXVlc3RlZCAnICtcbiAgICAgICAgICAgICAgICAgICdwb3J0IG1heSBhbHJlYWR5IGJlIGluIHVzZS4gUGxlYXNlIG1ha2Ugc3VyZSB0aGVyZSBpcyBubyAnICtcbiAgICAgICAgICAgICAgICAgICdvdGhlciBpbnN0YW5jZSBvZiB0aGlzIHNlcnZlciBydW5uaW5nIGFscmVhZHkuJyk7XG4gICAgICB9XG4gICAgICByZWplY3QoZXJyKTtcbiAgICB9KTtcbiAgICBodHRwU2VydmVyLm9uKCdjb25uZWN0aW9uJywgKHNvY2tldCkgPT4ge1xuICAgICAgc29ja2V0LnNldFRpbWVvdXQoS0VFUF9BTElWRV9USU1FT1VUX01TKTtcbiAgICAgIHNvY2tldC5vbignZXJyb3InLCByZWplY3QpO1xuXG4gICAgICBmdW5jdGlvbiBkZXN0cm95ICgpIHtcbiAgICAgICAgaWYgKHNvY2tldC5fb3BlblJlcUNvdW50ID09PSAwKSB7XG4gICAgICAgICAgc29ja2V0LmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc29ja2V0Ll9vcGVuUmVxQ291bnQgPSAwO1xuICAgICAgc29ja2V0Lm9uY2UoJ2Nsb3NlJywgKCkgPT4gc2VydmVyU3RhdGVOb3RpZmllci5yZW1vdmVMaXN0ZW5lcignc2h1dGRvd24nLCBkZXN0cm95KSk7XG4gICAgICBzZXJ2ZXJTdGF0ZU5vdGlmaWVyLm9uY2UoJ3NodXRkb3duJywgZGVzdHJveSk7XG4gICAgfSk7XG4gICAgaHR0cFNlcnZlci5vbigncmVxdWVzdCcsIGZ1bmN0aW9uIChyZXEsIHJlcykge1xuICAgICAgY29uc3Qgc29ja2V0ID0gcmVxLmNvbm5lY3Rpb24gfHwgcmVxLnNvY2tldDtcbiAgICAgIHNvY2tldC5fb3BlblJlcUNvdW50Kys7XG4gICAgICByZXMub24oJ2ZpbmlzaCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc29ja2V0Ll9vcGVuUmVxQ291bnQtLTtcbiAgICAgICAgaWYgKGlzU2VydmVyQ2xvc2VkICYmIHNvY2tldC5fb3BlblJlcUNvdW50ID09PSAwKSB7XG4gICAgICAgICAgc29ja2V0LmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgY29uZmlndXJlU2VydmVyKGFwcCwgcm91dGVDb25maWd1cmluZ0Z1bmN0aW9uLCBhbGxvd0NvcnMsIGJhc2VQYXRoKTtcblxuICAgIGxldCBzZXJ2ZXJBcmdzID0gW3BvcnRdO1xuICAgIGlmIChob3N0bmFtZSkge1xuICAgICAgLy8gSWYgdGhlIGhvc3RuYW1lIGlzIG9taXR0ZWQsIHRoZSBzZXJ2ZXIgd2lsbCBhY2NlcHRcbiAgICAgIC8vIGNvbm5lY3Rpb25zIG9uIGFueSBJUCBhZGRyZXNzXG4gICAgICBzZXJ2ZXJBcmdzLnB1c2goaG9zdG5hbWUpO1xuICAgIH1cbiAgICBodHRwU2VydmVyLmxpc3RlbiguLi5zZXJ2ZXJBcmdzLCAoZXJyKSA9PiB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgfVxuICAgICAgcmVzb2x2ZShodHRwU2VydmVyKTtcbiAgICB9KTtcbiAgICBodHRwU2VydmVyLmtlZXBBbGl2ZVRpbWVvdXQgPSBLRUVQX0FMSVZFX1RJTUVPVVRfTVM7XG4gICAgLy8gaGVhZGVycyB0aW1lb3V0IG11c3QgYmUgZ3JlYXRlciB0aGFuIGtlZXBBbGl2ZVRpbWVvdXRcbiAgICBodHRwU2VydmVyLmhlYWRlcnNUaW1lb3V0ID0gS0VFUF9BTElWRV9USU1FT1VUX01TICsgNSAqIDEwMDA7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVCYXNlUGF0aCAoYmFzZVBhdGgpIHtcbiAgaWYgKCFfLmlzU3RyaW5nKGJhc2VQYXRoKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBwYXRoIHByZWZpeCAke2Jhc2VQYXRofWApO1xuICB9XG5cbiAgLy8gZW5zdXJlIHRoZSBwYXRoIHByZWZpeCBkb2VzIG5vdCBlbmQgaW4gJy8nLCBzaW5jZSBvdXIgbWV0aG9kIG1hcFxuICAvLyBzdGFydHMgYWxsIHBhdGhzIHdpdGggJy8nXG4gIGJhc2VQYXRoID0gYmFzZVBhdGgucmVwbGFjZSgvXFwvJC8sICcnKTtcblxuICAvLyBsaWtld2lzZSwgZW5zdXJlIHRoZSBwYXRoIHByZWZpeCBkb2VzIGFsd2F5cyBTVEFSVCB3aXRoIC8sIHVubGVzcyB0aGUgcGF0aFxuICAvLyBpcyBlbXB0eSBtZWFuaW5nIG5vIGJhc2UgcGF0aCBhdCBhbGxcbiAgaWYgKGJhc2VQYXRoICE9PSAnJyAmJiBiYXNlUGF0aFswXSAhPT0gJy8nKSB7XG4gICAgYmFzZVBhdGggPSBgLyR7YmFzZVBhdGh9YDtcbiAgfVxuXG4gIHJldHVybiBiYXNlUGF0aDtcbn1cblxuZnVuY3Rpb24gY29uZmlndXJlU2VydmVyIChhcHAsIHJvdXRlQ29uZmlndXJpbmdGdW5jdGlvbiwgYWxsb3dDb3JzID0gdHJ1ZSwgYmFzZVBhdGggPSBERUZBVUxUX0JBU0VfUEFUSCkge1xuICBiYXNlUGF0aCA9IG5vcm1hbGl6ZUJhc2VQYXRoKGJhc2VQYXRoKTtcblxuICBhcHAudXNlKGVuZExvZ0Zvcm1hdHRlcik7XG5cbiAgLy8gc2V0IHVwIHN0YXRpYyBhc3NldHNcbiAgYXBwLnVzZShmYXZpY29uKHBhdGgucmVzb2x2ZShTVEFUSUNfRElSLCAnZmF2aWNvbi5pY28nKSkpO1xuICBhcHAudXNlKGV4cHJlc3Muc3RhdGljKFNUQVRJQ19ESVIpKTtcblxuICAvLyBjcmFzaCByb3V0ZXMsIGZvciB0ZXN0aW5nXG4gIGFwcC51c2UoYCR7YmFzZVBhdGh9L3Byb2R1Y2VfZXJyb3JgLCBwcm9kdWNlRXJyb3IpO1xuICBhcHAudXNlKGAke2Jhc2VQYXRofS9jcmFzaGAsIHByb2R1Y2VDcmFzaCk7XG5cbiAgLy8gYWRkIG1pZGRsZXdhcmVzXG4gIGlmIChhbGxvd0NvcnMpIHtcbiAgICBhcHAudXNlKGFsbG93Q3Jvc3NEb21haW4pO1xuICB9IGVsc2Uge1xuICAgIGFwcC51c2UoYWxsb3dDcm9zc0RvbWFpbkFzeW5jRXhlY3V0ZShiYXNlUGF0aCkpO1xuICB9XG4gIGFwcC51c2UoaGFuZGxlSWRlbXBvdGVuY3kpO1xuICBhcHAudXNlKGZpeFB5dGhvbkNvbnRlbnRUeXBlKGJhc2VQYXRoKSk7XG4gIGFwcC51c2UoZGVmYXVsdFRvSlNPTkNvbnRlbnRUeXBlKTtcbiAgYXBwLnVzZShib2R5UGFyc2VyLnVybGVuY29kZWQoe2V4dGVuZGVkOiB0cnVlfSkpO1xuICBhcHAudXNlKG1ldGhvZE92ZXJyaWRlKCkpO1xuICBhcHAudXNlKGNhdGNoNFhYSGFuZGxlcik7XG4gIGFwcC51c2UoY2F0Y2hBbGxIYW5kbGVyKTtcblxuICAvLyBtYWtlIHN1cmUgYXBwaXVtIG5ldmVyIGZhaWxzIGJlY2F1c2Ugb2YgYSBmaWxlIHNpemUgdXBsb2FkIGxpbWl0XG4gIGFwcC51c2UoYm9keVBhcnNlci5qc29uKHtsaW1pdDogJzFnYid9KSk7XG5cbiAgLy8gc2V0IHVwIHN0YXJ0IGxvZ2dpbmcgKHdoaWNoIGRlcGVuZHMgb24gYm9keVBhcnNlciBkb2luZyBpdHMgdGhpbmcpXG4gIGFwcC51c2Uoc3RhcnRMb2dGb3JtYXR0ZXIpO1xuXG4gIHJvdXRlQ29uZmlndXJpbmdGdW5jdGlvbihhcHAsIGJhc2VQYXRoKTtcblxuICAvLyBkeW5hbWljIHJvdXRlcyBmb3IgdGVzdGluZywgZXRjLlxuICBhcHAuYWxsKCcvd2VsY29tZScsIHdlbGNvbWUpO1xuICBhcHAuYWxsKCcvdGVzdC9ndWluZWEtcGlnJywgZ3VpbmVhUGlnKTtcbiAgYXBwLmFsbCgnL3Rlc3QvZ3VpbmVhLXBpZy1zY3JvbGxhYmxlJywgZ3VpbmVhUGlnU2Nyb2xsYWJsZSk7XG4gIGFwcC5hbGwoJy90ZXN0L2d1aW5lYS1waWctYXBwLWJhbm5lcicsIGd1aW5lYVBpZ0FwcEJhbm5lcik7XG5cbiAgLy8gY2F0Y2ggdGhpcyBsYXN0LCBzbyBhbnl0aGluZyB0aGF0IGZhbGxzIHRocm91Z2ggaXMgNDA0ZWRcbiAgYXBwLnVzZShjYXRjaDQwNEhhbmRsZXIpO1xufVxuXG5leHBvcnQgeyBzZXJ2ZXIsIGNvbmZpZ3VyZVNlcnZlciwgbm9ybWFsaXplQmFzZVBhdGggfTtcbiJdLCJmaWxlIjoibGliL2V4cHJlc3Mvc2VydmVyLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
