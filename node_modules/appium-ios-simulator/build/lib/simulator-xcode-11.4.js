"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("./logger"));

var _simulatorXcode = _interopRequireDefault(require("./simulator-xcode-11"));

const NATIVE_SIMCTL_PERMISSIONS = ['all', 'calendar', 'contacts-limited', 'contacts', 'location', 'location-always', 'photos-add', 'photos', 'media-library', 'microphone', 'motion', 'reminders', 'siri'];

class SimulatorXcode11_4 extends _simulatorXcode.default {
  constructor(udid, xcodeVersion) {
    super(udid, xcodeVersion);
    this._locationMenu = 'Features';
  }

  async setAppearance(value) {
    await this.simctl.setAppearance(_lodash.default.toLower(value));
  }

  async getAppearance() {
    return await this.simctl.getAppearance();
  }

  async addCertificate(payload, opts = {}) {
    const {
      isRoot = true
    } = opts;
    const methodName = isRoot ? 'addRootCertificate' : 'addCertificate';
    await this.simctl[methodName](payload, {
      raw: true
    });
    return true;
  }

  async pushNotification(payload) {
    await this.simctl.pushNotification(payload);
  }

  async setPermissions(bundleId, permissionsMapping) {
    _logger.default.debug(`Setting access for '${bundleId}': ` + JSON.stringify(permissionsMapping, null, 2));

    const nonNativePerms = {};

    for (let [permName, access] of _lodash.default.toPairs(permissionsMapping)) {
      if (!NATIVE_SIMCTL_PERMISSIONS.includes(permName)) {
        nonNativePerms[permName] = access;
        continue;
      }

      access = _lodash.default.toLower(access);

      if (permName === 'medialibrary') {
        permName = 'media-library';
      } else if (permName === 'location' && access === 'always') {
        permName = 'location-always';
      }

      switch (access) {
        case 'yes':
        case 'inuse':
        case 'always':
          await this.simctl.grantPermission(bundleId, permName);
          break;

        case 'no':
        case 'never':
          await this.simctl.revokePermission(bundleId, permName);
          break;

        case 'unset':
          await this.simctl.resetPermission(bundleId, permName);
          break;

        default:
          throw new Error(`Unknown access value: ${access}`);
      }
    }

    if (!_lodash.default.isEmpty(nonNativePerms)) {
      _logger.default.info(`The following permissions have not been recognized as native: ` + JSON.stringify(permissionsMapping, null, 2));

      await super.setPermissions(bundleId, nonNativePerms);
    }
  }

  async clearKeychains() {
    await this.simctl.resetKeychain();
  }

}

var _default = SimulatorXcode11_4;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
