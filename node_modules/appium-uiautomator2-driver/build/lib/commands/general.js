"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("../logger"));

var _appiumBaseDriver = require("appium-base-driver");

var _appiumSupport = require("appium-support");

let extensions = {},
    commands = {},
    helpers = {};

commands.getPageSource = async function () {
  return await this.uiautomator2.jwproxy.command('/source', 'GET', {});
};

commands.getClipboard = async function () {
  return (await this.adb.getApiLevel()) < 29 ? await this.uiautomator2.jwproxy.command('/appium/device/get_clipboard', 'POST', {}) : await this.adb.getClipboard();
};

commands.doSendKeys = async function (params) {
  await this.uiautomator2.jwproxy.command('/keys', 'POST', params);
};

commands.keyevent = async function (keycode, metastate) {
  _logger.default.debug(`Ignoring metastate ${metastate}`);

  await this.adb.keyevent(keycode);
};

commands.back = async function () {
  await this.adb.keyevent(4);
};

commands.getStrings = async function (language) {
  if (!language) {
    language = await this.adb.getDeviceLanguage();

    _logger.default.info(`No language specified, returning strings for: ${language}`);
  }

  const preprocessStringsMap = function (mapping) {
    const result = {};

    for (const [key, value] of _lodash.default.toPairs(mapping)) {
      result[key] = _lodash.default.isString(value) ? value : JSON.stringify(value);
    }

    return result;
  };

  if (this.apkStrings[language]) {
    return preprocessStringsMap(this.apkStrings[language]);
  }

  if (!this.opts.app && !this.opts.appPackage) {
    _logger.default.errorAndThrow("One of 'app' or 'appPackage' capabilities should must be specified");
  }

  let app = this.opts.app;
  const tmpRoot = await _appiumSupport.tempDir.openDir();

  try {
    if (!app) {
      try {
        app = await this.adb.pullApk(this.opts.appPackage, tmpRoot);
      } catch (err) {
        _logger.default.errorAndThrow(`Failed to pull an apk from '${this.opts.appPackage}'. Original error: ${err.message}`);
      }
    }

    if (!(await _appiumSupport.fs.exists(app))) {
      _logger.default.errorAndThrow(`The app at '${app}' does not exist`);
    }

    try {
      const {
        apkStrings
      } = await this.adb.extractStringsFromApk(app, language, tmpRoot);
      this.apkStrings[language] = apkStrings;
      return preprocessStringsMap(apkStrings);
    } catch (err) {
      _logger.default.errorAndThrow(`Cannot extract strings from '${app}'. Original error: ${err.message}`);
    }
  } finally {
    await _appiumSupport.fs.rimraf(tmpRoot);
  }
};

commands.getWindowSize = async function () {
  return await this.uiautomator2.jwproxy.command('/window/current/size', 'GET', {});
};

commands.getWindowRect = async function () {
  const {
    width,
    height
  } = await this.getWindowSize();
  return {
    width,
    height,
    x: 0,
    y: 0
  };
};

extensions.executeMobile = async function (mobileCommand, opts = {}) {
  const mobileCommandsMapping = {
    shell: 'mobileShell',
    execEmuConsoleCommand: 'mobileExecEmuConsoleCommand',
    scrollBackTo: 'mobileScrollBackTo',
    scroll: 'mobileScroll',
    viewportScreenshot: 'mobileViewportScreenshot',
    deepLink: 'mobileDeepLink',
    startLogsBroadcast: 'mobileStartLogsBroadcast',
    stopLogsBroadcast: 'mobileStopLogsBroadcast',
    acceptAlert: 'mobileAcceptAlert',
    dismissAlert: 'mobileDismissAlert',
    batteryInfo: 'mobileGetBatteryInfo',
    deviceInfo: 'mobileGetDeviceInfo',
    getDeviceTime: 'mobileGetDeviceTime',
    changePermissions: 'mobileChangePermissions',
    getPermissions: 'mobileGetPermissions',
    performEditorAction: 'mobilePerformEditorAction',
    startScreenStreaming: 'mobileStartScreenStreaming',
    stopScreenStreaming: 'mobileStopScreenStreaming',
    getNotifications: 'mobileGetNotifications',
    listSms: 'mobileListSms',
    type: 'mobileType',
    sensorSet: 'sensorSet',
    deleteFile: 'mobileDeleteFile'
  };

  if (!_lodash.default.has(mobileCommandsMapping, mobileCommand)) {
    throw new _appiumBaseDriver.errors.UnknownCommandError(`Unknown mobile command "${mobileCommand}". ` + `Only ${_lodash.default.keys(mobileCommandsMapping)} commands are supported.`);
  }

  return await this[mobileCommandsMapping[mobileCommand]](opts);
};

commands.mobileScrollBackTo = async function (opts = {}) {
  const {
    elementId,
    elementToId
  } = opts;

  if (!elementId || !elementToId) {
    _logger.default.errorAndThrow(`Both elementId and elementToId arguments must be provided`);
  }

  return await this.uiautomator2.jwproxy.command(`/appium/element/${_appiumSupport.util.unwrapElement(elementId)}/scroll_to/${_appiumSupport.util.unwrapElement(elementToId)}`, 'POST', {});
};

commands.mobileScroll = async function (opts = {}) {
  const {
    element,
    strategy,
    selector,
    maxSwipes
  } = opts;

  if (!strategy || !selector) {
    _logger.default.errorAndThrow(`Both strategy and selector arguments must be provided`);
  }

  const params = {
    params: {
      strategy,
      selector,
      maxSwipes
    }
  };

  if (element) {
    params.origin = {
      [_appiumBaseDriver.W3C_ELEMENT_KEY]: _appiumSupport.util.unwrapElement(element)
    };
  }

  return await this.uiautomator2.jwproxy.command(`/appium/touch/scroll`, 'POST', params);
};

commands.mobileViewportScreenshot = async function () {
  return await this.getViewportScreenshot();
};

commands.setUrl = async function (url) {
  await this.adb.startUri(url, this.opts.appPackage);
};

commands.mobileDeepLink = async function (opts = {}) {
  const {
    url,
    package: pkg,
    waitForLaunch
  } = opts;
  return await this.adb.startUri(url, pkg, {
    waitForLaunch
  });
};

commands.openNotifications = async function () {
  return await this.uiautomator2.jwproxy.command('/appium/device/open_notifications', 'POST', {});
};

commands.updateSettings = async function (settings) {
  let driverOnlySettings = {};
  let serverSettings = {};

  for (let [setting, value] of _lodash.default.toPairs(settings)) {
    if (_appiumBaseDriver.BASEDRIVER_HANDLED_SETTINGS.includes(setting)) {
      driverOnlySettings[setting] = value;
    } else {
      serverSettings[setting] = value;
    }
  }

  if (!_lodash.default.isEmpty(driverOnlySettings)) {
    _logger.default.info(`Found some settings designed to be handled by BaseDriver: ` + `${JSON.stringify(_lodash.default.keys(driverOnlySettings))}. Not ` + `sending these on to the UiAutomator2 server and instead ` + `setting directly on the driver`);

    await this.settings.update(driverOnlySettings);
  }

  if (!_lodash.default.isEmpty(serverSettings)) {
    _logger.default.info('Forwarding the following settings to the UiAutomator2 server: ' + JSON.stringify(_lodash.default.keys(serverSettings)));

    await this.uiautomator2.jwproxy.command('/appium/settings', 'POST', {
      settings: serverSettings
    });
  }
};

commands.getSettings = async function () {
  const driverOnlySettings = this.settings.getSettings();
  const serverSettings = await this.uiautomator2.jwproxy.command('/appium/settings', 'GET');
  return { ...driverOnlySettings,
    ...serverSettings
  };
};

helpers.wrapBootstrapDisconnect = async function (wrapped) {
  await wrapped();
};

helpers.suspendChromedriverProxy = function () {
  this.chromedriver = null;
  this.proxyReqRes = this.uiautomator2.proxyReqRes.bind(this.uiautomator2);
  this.jwpProxyActive = true;
};

commands.mobileGetDeviceInfo = async function () {
  return await this.uiautomator2.jwproxy.command('/appium/device/info', 'GET');
};

commands.mobileType = async function mobileType(opts = {}) {
  const {
    text
  } = opts;

  if (_lodash.default.isUndefined(text)) {
    _logger.default.errorAndThrow(`The 'text' argument is mandatory`);
  }

  return await this.adb.typeUnicode(text);
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9nZW5lcmFsLmpzIl0sIm5hbWVzIjpbImV4dGVuc2lvbnMiLCJjb21tYW5kcyIsImhlbHBlcnMiLCJnZXRQYWdlU291cmNlIiwidWlhdXRvbWF0b3IyIiwiandwcm94eSIsImNvbW1hbmQiLCJnZXRDbGlwYm9hcmQiLCJhZGIiLCJnZXRBcGlMZXZlbCIsImRvU2VuZEtleXMiLCJwYXJhbXMiLCJrZXlldmVudCIsImtleWNvZGUiLCJtZXRhc3RhdGUiLCJsb2ciLCJkZWJ1ZyIsImJhY2siLCJnZXRTdHJpbmdzIiwibGFuZ3VhZ2UiLCJnZXREZXZpY2VMYW5ndWFnZSIsImluZm8iLCJwcmVwcm9jZXNzU3RyaW5nc01hcCIsIm1hcHBpbmciLCJyZXN1bHQiLCJrZXkiLCJ2YWx1ZSIsIl8iLCJ0b1BhaXJzIiwiaXNTdHJpbmciLCJKU09OIiwic3RyaW5naWZ5IiwiYXBrU3RyaW5ncyIsIm9wdHMiLCJhcHAiLCJhcHBQYWNrYWdlIiwiZXJyb3JBbmRUaHJvdyIsInRtcFJvb3QiLCJ0ZW1wRGlyIiwib3BlbkRpciIsInB1bGxBcGsiLCJlcnIiLCJtZXNzYWdlIiwiZnMiLCJleGlzdHMiLCJleHRyYWN0U3RyaW5nc0Zyb21BcGsiLCJyaW1yYWYiLCJnZXRXaW5kb3dTaXplIiwiZ2V0V2luZG93UmVjdCIsIndpZHRoIiwiaGVpZ2h0IiwieCIsInkiLCJleGVjdXRlTW9iaWxlIiwibW9iaWxlQ29tbWFuZCIsIm1vYmlsZUNvbW1hbmRzTWFwcGluZyIsInNoZWxsIiwiZXhlY0VtdUNvbnNvbGVDb21tYW5kIiwic2Nyb2xsQmFja1RvIiwic2Nyb2xsIiwidmlld3BvcnRTY3JlZW5zaG90IiwiZGVlcExpbmsiLCJzdGFydExvZ3NCcm9hZGNhc3QiLCJzdG9wTG9nc0Jyb2FkY2FzdCIsImFjY2VwdEFsZXJ0IiwiZGlzbWlzc0FsZXJ0IiwiYmF0dGVyeUluZm8iLCJkZXZpY2VJbmZvIiwiZ2V0RGV2aWNlVGltZSIsImNoYW5nZVBlcm1pc3Npb25zIiwiZ2V0UGVybWlzc2lvbnMiLCJwZXJmb3JtRWRpdG9yQWN0aW9uIiwic3RhcnRTY3JlZW5TdHJlYW1pbmciLCJzdG9wU2NyZWVuU3RyZWFtaW5nIiwiZ2V0Tm90aWZpY2F0aW9ucyIsImxpc3RTbXMiLCJ0eXBlIiwic2Vuc29yU2V0IiwiZGVsZXRlRmlsZSIsImhhcyIsImVycm9ycyIsIlVua25vd25Db21tYW5kRXJyb3IiLCJrZXlzIiwibW9iaWxlU2Nyb2xsQmFja1RvIiwiZWxlbWVudElkIiwiZWxlbWVudFRvSWQiLCJ1dGlsIiwidW53cmFwRWxlbWVudCIsIm1vYmlsZVNjcm9sbCIsImVsZW1lbnQiLCJzdHJhdGVneSIsInNlbGVjdG9yIiwibWF4U3dpcGVzIiwib3JpZ2luIiwiVzNDX0VMRU1FTlRfS0VZIiwibW9iaWxlVmlld3BvcnRTY3JlZW5zaG90IiwiZ2V0Vmlld3BvcnRTY3JlZW5zaG90Iiwic2V0VXJsIiwidXJsIiwic3RhcnRVcmkiLCJtb2JpbGVEZWVwTGluayIsInBhY2thZ2UiLCJwa2ciLCJ3YWl0Rm9yTGF1bmNoIiwib3Blbk5vdGlmaWNhdGlvbnMiLCJ1cGRhdGVTZXR0aW5ncyIsInNldHRpbmdzIiwiZHJpdmVyT25seVNldHRpbmdzIiwic2VydmVyU2V0dGluZ3MiLCJzZXR0aW5nIiwiQkFTRURSSVZFUl9IQU5ETEVEX1NFVFRJTkdTIiwiaW5jbHVkZXMiLCJpc0VtcHR5IiwidXBkYXRlIiwiZ2V0U2V0dGluZ3MiLCJ3cmFwQm9vdHN0cmFwRGlzY29ubmVjdCIsIndyYXBwZWQiLCJzdXNwZW5kQ2hyb21lZHJpdmVyUHJveHkiLCJjaHJvbWVkcml2ZXIiLCJwcm94eVJlcVJlcyIsImJpbmQiLCJqd3BQcm94eUFjdGl2ZSIsIm1vYmlsZUdldERldmljZUluZm8iLCJtb2JpbGVUeXBlIiwidGV4dCIsImlzVW5kZWZpbmVkIiwidHlwZVVuaWNvZGUiLCJPYmplY3QiLCJhc3NpZ24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUEsSUFBSUEsVUFBVSxHQUFHLEVBQWpCO0FBQUEsSUFDSUMsUUFBUSxHQUFHLEVBRGY7QUFBQSxJQUVJQyxPQUFPLEdBQUcsRUFGZDs7QUFJQUQsUUFBUSxDQUFDRSxhQUFULEdBQXlCLGtCQUFrQjtBQUN6QyxTQUFPLE1BQU0sS0FBS0MsWUFBTCxDQUFrQkMsT0FBbEIsQ0FBMEJDLE9BQTFCLENBQWtDLFNBQWxDLEVBQTZDLEtBQTdDLEVBQW9ELEVBQXBELENBQWI7QUFDRCxDQUZEOztBQUlBTCxRQUFRLENBQUNNLFlBQVQsR0FBd0Isa0JBQWtCO0FBQ3hDLFNBQVEsT0FBTSxLQUFLQyxHQUFMLENBQVNDLFdBQVQsRUFBTixJQUErQixFQUFoQyxHQUNGLE1BQU0sS0FBS0wsWUFBTCxDQUFrQkMsT0FBbEIsQ0FBMEJDLE9BQTFCLENBQWtDLDhCQUFsQyxFQUFrRSxNQUFsRSxFQUEwRSxFQUExRSxDQURKLEdBRUYsTUFBTSxLQUFLRSxHQUFMLENBQVNELFlBQVQsRUFGWDtBQUdELENBSkQ7O0FBT0FOLFFBQVEsQ0FBQ1MsVUFBVCxHQUFzQixnQkFBZ0JDLE1BQWhCLEVBQXdCO0FBQzVDLFFBQU0sS0FBS1AsWUFBTCxDQUFrQkMsT0FBbEIsQ0FBMEJDLE9BQTFCLENBQWtDLE9BQWxDLEVBQTJDLE1BQTNDLEVBQW1ESyxNQUFuRCxDQUFOO0FBQ0QsQ0FGRDs7QUFLQVYsUUFBUSxDQUFDVyxRQUFULEdBQW9CLGdCQUFnQkMsT0FBaEIsRUFBeUJDLFNBQXpCLEVBQW9DO0FBQ3REQyxrQkFBSUMsS0FBSixDQUFXLHNCQUFxQkYsU0FBVSxFQUExQzs7QUFDQSxRQUFNLEtBQUtOLEdBQUwsQ0FBU0ksUUFBVCxDQUFrQkMsT0FBbEIsQ0FBTjtBQUNELENBSEQ7O0FBTUFaLFFBQVEsQ0FBQ2dCLElBQVQsR0FBZ0Isa0JBQWtCO0FBQ2hDLFFBQU0sS0FBS1QsR0FBTCxDQUFTSSxRQUFULENBQWtCLENBQWxCLENBQU47QUFDRCxDQUZEOztBQUlBWCxRQUFRLENBQUNpQixVQUFULEdBQXNCLGdCQUFnQkMsUUFBaEIsRUFBMEI7QUFDOUMsTUFBSSxDQUFDQSxRQUFMLEVBQWU7QUFDYkEsSUFBQUEsUUFBUSxHQUFHLE1BQU0sS0FBS1gsR0FBTCxDQUFTWSxpQkFBVCxFQUFqQjs7QUFDQUwsb0JBQUlNLElBQUosQ0FBVSxpREFBZ0RGLFFBQVMsRUFBbkU7QUFDRDs7QUFJRCxRQUFNRyxvQkFBb0IsR0FBRyxVQUFVQyxPQUFWLEVBQW1CO0FBQzlDLFVBQU1DLE1BQU0sR0FBRyxFQUFmOztBQUNBLFNBQUssTUFBTSxDQUFDQyxHQUFELEVBQU1DLEtBQU4sQ0FBWCxJQUEyQkMsZ0JBQUVDLE9BQUYsQ0FBVUwsT0FBVixDQUEzQixFQUErQztBQUM3Q0MsTUFBQUEsTUFBTSxDQUFDQyxHQUFELENBQU4sR0FBY0UsZ0JBQUVFLFFBQUYsQ0FBV0gsS0FBWCxJQUFvQkEsS0FBcEIsR0FBNEJJLElBQUksQ0FBQ0MsU0FBTCxDQUFlTCxLQUFmLENBQTFDO0FBQ0Q7O0FBQ0QsV0FBT0YsTUFBUDtBQUNELEdBTkQ7O0FBUUEsTUFBSSxLQUFLUSxVQUFMLENBQWdCYixRQUFoQixDQUFKLEVBQStCO0FBRTdCLFdBQU9HLG9CQUFvQixDQUFDLEtBQUtVLFVBQUwsQ0FBZ0JiLFFBQWhCLENBQUQsQ0FBM0I7QUFDRDs7QUFFRCxNQUFJLENBQUMsS0FBS2MsSUFBTCxDQUFVQyxHQUFYLElBQWtCLENBQUMsS0FBS0QsSUFBTCxDQUFVRSxVQUFqQyxFQUE2QztBQUMzQ3BCLG9CQUFJcUIsYUFBSixDQUFrQixvRUFBbEI7QUFDRDs7QUFFRCxNQUFJRixHQUFHLEdBQUcsS0FBS0QsSUFBTCxDQUFVQyxHQUFwQjtBQUNBLFFBQU1HLE9BQU8sR0FBRyxNQUFNQyx1QkFBUUMsT0FBUixFQUF0Qjs7QUFDQSxNQUFJO0FBQ0YsUUFBSSxDQUFDTCxHQUFMLEVBQVU7QUFDUixVQUFJO0FBQ0ZBLFFBQUFBLEdBQUcsR0FBRyxNQUFNLEtBQUsxQixHQUFMLENBQVNnQyxPQUFULENBQWlCLEtBQUtQLElBQUwsQ0FBVUUsVUFBM0IsRUFBdUNFLE9BQXZDLENBQVo7QUFDRCxPQUZELENBRUUsT0FBT0ksR0FBUCxFQUFZO0FBQ1oxQix3QkFBSXFCLGFBQUosQ0FBbUIsK0JBQThCLEtBQUtILElBQUwsQ0FBVUUsVUFBVyxzQkFBcUJNLEdBQUcsQ0FBQ0MsT0FBUSxFQUF2RztBQUNEO0FBQ0Y7O0FBRUQsUUFBSSxFQUFDLE1BQU1DLGtCQUFHQyxNQUFILENBQVVWLEdBQVYsQ0FBUCxDQUFKLEVBQTJCO0FBQ3pCbkIsc0JBQUlxQixhQUFKLENBQW1CLGVBQWNGLEdBQUksa0JBQXJDO0FBQ0Q7O0FBRUQsUUFBSTtBQUNGLFlBQU07QUFBQ0YsUUFBQUE7QUFBRCxVQUFlLE1BQU0sS0FBS3hCLEdBQUwsQ0FBU3FDLHFCQUFULENBQStCWCxHQUEvQixFQUFvQ2YsUUFBcEMsRUFBOENrQixPQUE5QyxDQUEzQjtBQUNBLFdBQUtMLFVBQUwsQ0FBZ0JiLFFBQWhCLElBQTRCYSxVQUE1QjtBQUNBLGFBQU9WLG9CQUFvQixDQUFDVSxVQUFELENBQTNCO0FBQ0QsS0FKRCxDQUlFLE9BQU9TLEdBQVAsRUFBWTtBQUNaMUIsc0JBQUlxQixhQUFKLENBQW1CLGdDQUErQkYsR0FBSSxzQkFBcUJPLEdBQUcsQ0FBQ0MsT0FBUSxFQUF2RjtBQUNEO0FBQ0YsR0FwQkQsU0FvQlU7QUFDUixVQUFNQyxrQkFBR0csTUFBSCxDQUFVVCxPQUFWLENBQU47QUFDRDtBQUNGLENBbEREOztBQXFEQXBDLFFBQVEsQ0FBQzhDLGFBQVQsR0FBeUIsa0JBQWtCO0FBQ3pDLFNBQU8sTUFBTSxLQUFLM0MsWUFBTCxDQUFrQkMsT0FBbEIsQ0FBMEJDLE9BQTFCLENBQWtDLHNCQUFsQyxFQUEwRCxLQUExRCxFQUFpRSxFQUFqRSxDQUFiO0FBQ0QsQ0FGRDs7QUFLQUwsUUFBUSxDQUFDK0MsYUFBVCxHQUF5QixrQkFBa0I7QUFDekMsUUFBTTtBQUFDQyxJQUFBQSxLQUFEO0FBQVFDLElBQUFBO0FBQVIsTUFBa0IsTUFBTSxLQUFLSCxhQUFMLEVBQTlCO0FBQ0EsU0FBTztBQUNMRSxJQUFBQSxLQURLO0FBRUxDLElBQUFBLE1BRks7QUFHTEMsSUFBQUEsQ0FBQyxFQUFFLENBSEU7QUFJTEMsSUFBQUEsQ0FBQyxFQUFFO0FBSkUsR0FBUDtBQU1ELENBUkQ7O0FBVUFwRCxVQUFVLENBQUNxRCxhQUFYLEdBQTJCLGdCQUFnQkMsYUFBaEIsRUFBK0JyQixJQUFJLEdBQUcsRUFBdEMsRUFBMEM7QUFDbkUsUUFBTXNCLHFCQUFxQixHQUFHO0FBQzVCQyxJQUFBQSxLQUFLLEVBQUUsYUFEcUI7QUFHNUJDLElBQUFBLHFCQUFxQixFQUFFLDZCQUhLO0FBSzVCQyxJQUFBQSxZQUFZLEVBQUUsb0JBTGM7QUFNNUJDLElBQUFBLE1BQU0sRUFBRSxjQU5vQjtBQU81QkMsSUFBQUEsa0JBQWtCLEVBQUUsMEJBUFE7QUFTNUJDLElBQUFBLFFBQVEsRUFBRSxnQkFUa0I7QUFXNUJDLElBQUFBLGtCQUFrQixFQUFFLDBCQVhRO0FBWTVCQyxJQUFBQSxpQkFBaUIsRUFBRSx5QkFaUztBQWM1QkMsSUFBQUEsV0FBVyxFQUFFLG1CQWRlO0FBZTVCQyxJQUFBQSxZQUFZLEVBQUUsb0JBZmM7QUFpQjVCQyxJQUFBQSxXQUFXLEVBQUUsc0JBakJlO0FBbUI1QkMsSUFBQUEsVUFBVSxFQUFFLHFCQW5CZ0I7QUFxQjVCQyxJQUFBQSxhQUFhLEVBQUUscUJBckJhO0FBdUI1QkMsSUFBQUEsaUJBQWlCLEVBQUUseUJBdkJTO0FBd0I1QkMsSUFBQUEsY0FBYyxFQUFFLHNCQXhCWTtBQTBCNUJDLElBQUFBLG1CQUFtQixFQUFFLDJCQTFCTztBQTRCNUJDLElBQUFBLG9CQUFvQixFQUFFLDRCQTVCTTtBQTZCNUJDLElBQUFBLG1CQUFtQixFQUFFLDJCQTdCTztBQStCNUJDLElBQUFBLGdCQUFnQixFQUFFLHdCQS9CVTtBQWlDNUJDLElBQUFBLE9BQU8sRUFBRSxlQWpDbUI7QUFtQzVCQyxJQUFBQSxJQUFJLEVBQUUsWUFuQ3NCO0FBb0M1QkMsSUFBQUEsU0FBUyxFQUFFLFdBcENpQjtBQXNDNUJDLElBQUFBLFVBQVUsRUFBRTtBQXRDZ0IsR0FBOUI7O0FBeUNBLE1BQUksQ0FBQ25ELGdCQUFFb0QsR0FBRixDQUFNeEIscUJBQU4sRUFBNkJELGFBQTdCLENBQUwsRUFBa0Q7QUFDaEQsVUFBTSxJQUFJMEIseUJBQU9DLG1CQUFYLENBQWdDLDJCQUEwQjNCLGFBQWMsS0FBekMsR0FDbEMsUUFBTzNCLGdCQUFFdUQsSUFBRixDQUFPM0IscUJBQVAsQ0FBOEIsMEJBRGxDLENBQU47QUFFRDs7QUFDRCxTQUFPLE1BQU0sS0FBS0EscUJBQXFCLENBQUNELGFBQUQsQ0FBMUIsRUFBMkNyQixJQUEzQyxDQUFiO0FBQ0QsQ0EvQ0Q7O0FBd0VBaEMsUUFBUSxDQUFDa0Ysa0JBQVQsR0FBOEIsZ0JBQWdCbEQsSUFBSSxHQUFHLEVBQXZCLEVBQTJCO0FBQ3ZELFFBQU07QUFBQ21ELElBQUFBLFNBQUQ7QUFBWUMsSUFBQUE7QUFBWixNQUEyQnBELElBQWpDOztBQUNBLE1BQUksQ0FBQ21ELFNBQUQsSUFBYyxDQUFDQyxXQUFuQixFQUFnQztBQUM5QnRFLG9CQUFJcUIsYUFBSixDQUFtQiwyREFBbkI7QUFDRDs7QUFDRCxTQUFPLE1BQU0sS0FBS2hDLFlBQUwsQ0FBa0JDLE9BQWxCLENBQTBCQyxPQUExQixDQUNWLG1CQUFrQmdGLG9CQUFLQyxhQUFMLENBQW1CSCxTQUFuQixDQUE4QixjQUFhRSxvQkFBS0MsYUFBTCxDQUFtQkYsV0FBbkIsQ0FBZ0MsRUFEbkYsRUFDc0YsTUFEdEYsRUFDOEYsRUFEOUYsQ0FBYjtBQUVELENBUEQ7O0FBc0NBcEYsUUFBUSxDQUFDdUYsWUFBVCxHQUF3QixnQkFBZ0J2RCxJQUFJLEdBQUcsRUFBdkIsRUFBMkI7QUFDakQsUUFBTTtBQUFDd0QsSUFBQUEsT0FBRDtBQUFVQyxJQUFBQSxRQUFWO0FBQW9CQyxJQUFBQSxRQUFwQjtBQUE4QkMsSUFBQUE7QUFBOUIsTUFBMkMzRCxJQUFqRDs7QUFDQSxNQUFJLENBQUN5RCxRQUFELElBQWEsQ0FBQ0MsUUFBbEIsRUFBNEI7QUFDMUI1RSxvQkFBSXFCLGFBQUosQ0FBbUIsdURBQW5CO0FBQ0Q7O0FBQ0QsUUFBTXpCLE1BQU0sR0FBRztBQUNiQSxJQUFBQSxNQUFNLEVBQUU7QUFBQytFLE1BQUFBLFFBQUQ7QUFBV0MsTUFBQUEsUUFBWDtBQUFxQkMsTUFBQUE7QUFBckI7QUFESyxHQUFmOztBQUdBLE1BQUlILE9BQUosRUFBYTtBQUNYOUUsSUFBQUEsTUFBTSxDQUFDa0YsTUFBUCxHQUFnQjtBQUNkLE9BQUNDLGlDQUFELEdBQW1CUixvQkFBS0MsYUFBTCxDQUFtQkUsT0FBbkI7QUFETCxLQUFoQjtBQUdEOztBQUNELFNBQU8sTUFBTSxLQUFLckYsWUFBTCxDQUFrQkMsT0FBbEIsQ0FBMEJDLE9BQTFCLENBQW1DLHNCQUFuQyxFQUEwRCxNQUExRCxFQUFrRUssTUFBbEUsQ0FBYjtBQUNELENBZEQ7O0FBZ0JBVixRQUFRLENBQUM4Rix3QkFBVCxHQUFvQyxrQkFBa0I7QUFDcEQsU0FBTyxNQUFNLEtBQUtDLHFCQUFMLEVBQWI7QUFDRCxDQUZEOztBQUlBL0YsUUFBUSxDQUFDZ0csTUFBVCxHQUFrQixnQkFBZ0JDLEdBQWhCLEVBQXFCO0FBQ3JDLFFBQU0sS0FBSzFGLEdBQUwsQ0FBUzJGLFFBQVQsQ0FBa0JELEdBQWxCLEVBQXVCLEtBQUtqRSxJQUFMLENBQVVFLFVBQWpDLENBQU47QUFDRCxDQUZEOztBQWdCQWxDLFFBQVEsQ0FBQ21HLGNBQVQsR0FBMEIsZ0JBQWdCbkUsSUFBSSxHQUFHLEVBQXZCLEVBQTJCO0FBQ25ELFFBQU07QUFDSmlFLElBQUFBLEdBREk7QUFFSkcsSUFBQUEsT0FBTyxFQUFFQyxHQUZMO0FBR0pDLElBQUFBO0FBSEksTUFJRnRFLElBSko7QUFLQSxTQUFPLE1BQU0sS0FBS3pCLEdBQUwsQ0FBUzJGLFFBQVQsQ0FBa0JELEdBQWxCLEVBQXVCSSxHQUF2QixFQUE0QjtBQUFFQyxJQUFBQTtBQUFGLEdBQTVCLENBQWI7QUFDRCxDQVBEOztBQVNBdEcsUUFBUSxDQUFDdUcsaUJBQVQsR0FBNkIsa0JBQWtCO0FBQzdDLFNBQU8sTUFBTSxLQUFLcEcsWUFBTCxDQUFrQkMsT0FBbEIsQ0FBMEJDLE9BQTFCLENBQWtDLG1DQUFsQyxFQUF1RSxNQUF2RSxFQUErRSxFQUEvRSxDQUFiO0FBQ0QsQ0FGRDs7QUFJQUwsUUFBUSxDQUFDd0csY0FBVCxHQUEwQixnQkFBZ0JDLFFBQWhCLEVBQTBCO0FBS2xELE1BQUlDLGtCQUFrQixHQUFHLEVBQXpCO0FBQ0EsTUFBSUMsY0FBYyxHQUFHLEVBQXJCOztBQUNBLE9BQUssSUFBSSxDQUFDQyxPQUFELEVBQVVuRixLQUFWLENBQVQsSUFBNkJDLGdCQUFFQyxPQUFGLENBQVU4RSxRQUFWLENBQTdCLEVBQWtEO0FBQ2hELFFBQUlJLDhDQUE0QkMsUUFBNUIsQ0FBcUNGLE9BQXJDLENBQUosRUFBbUQ7QUFDakRGLE1BQUFBLGtCQUFrQixDQUFDRSxPQUFELENBQWxCLEdBQThCbkYsS0FBOUI7QUFDRCxLQUZELE1BRU87QUFDTGtGLE1BQUFBLGNBQWMsQ0FBQ0MsT0FBRCxDQUFkLEdBQTBCbkYsS0FBMUI7QUFDRDtBQUNGOztBQUNELE1BQUksQ0FBQ0MsZ0JBQUVxRixPQUFGLENBQVVMLGtCQUFWLENBQUwsRUFBb0M7QUFDbEM1RixvQkFBSU0sSUFBSixDQUFVLDREQUFELEdBQ0MsR0FBRVMsSUFBSSxDQUFDQyxTQUFMLENBQWVKLGdCQUFFdUQsSUFBRixDQUFPeUIsa0JBQVAsQ0FBZixDQUEyQyxRQUQ5QyxHQUVDLDBEQUZELEdBR0MsZ0NBSFY7O0FBSUEsVUFBTSxLQUFLRCxRQUFMLENBQWNPLE1BQWQsQ0FBcUJOLGtCQUFyQixDQUFOO0FBQ0Q7O0FBQ0QsTUFBSSxDQUFDaEYsZ0JBQUVxRixPQUFGLENBQVVKLGNBQVYsQ0FBTCxFQUFnQztBQUM5QjdGLG9CQUFJTSxJQUFKLENBQVMsbUVBQ0FTLElBQUksQ0FBQ0MsU0FBTCxDQUFlSixnQkFBRXVELElBQUYsQ0FBTzBCLGNBQVAsQ0FBZixDQURUOztBQUVBLFVBQU0sS0FBS3hHLFlBQUwsQ0FBa0JDLE9BQWxCLENBQTBCQyxPQUExQixDQUFrQyxrQkFBbEMsRUFBc0QsTUFBdEQsRUFDSjtBQUFDb0csTUFBQUEsUUFBUSxFQUFFRTtBQUFYLEtBREksQ0FBTjtBQUVEO0FBQ0YsQ0EzQkQ7O0FBNkJBM0csUUFBUSxDQUFDaUgsV0FBVCxHQUF1QixrQkFBa0I7QUFFdkMsUUFBTVAsa0JBQWtCLEdBQUcsS0FBS0QsUUFBTCxDQUFjUSxXQUFkLEVBQTNCO0FBQ0EsUUFBTU4sY0FBYyxHQUFHLE1BQU0sS0FBS3hHLFlBQUwsQ0FBa0JDLE9BQWxCLENBQTBCQyxPQUExQixDQUFrQyxrQkFBbEMsRUFBc0QsS0FBdEQsQ0FBN0I7QUFDQSxTQUFPLEVBQUMsR0FBR3FHLGtCQUFKO0FBQXdCLE9BQUdDO0FBQTNCLEdBQVA7QUFDRCxDQUxEOztBQVlBMUcsT0FBTyxDQUFDaUgsdUJBQVIsR0FBa0MsZ0JBQWdCQyxPQUFoQixFQUF5QjtBQUN6RCxRQUFNQSxPQUFPLEVBQWI7QUFDRCxDQUZEOztBQUtBbEgsT0FBTyxDQUFDbUgsd0JBQVIsR0FBbUMsWUFBWTtBQUM3QyxPQUFLQyxZQUFMLEdBQW9CLElBQXBCO0FBQ0EsT0FBS0MsV0FBTCxHQUFtQixLQUFLbkgsWUFBTCxDQUFrQm1ILFdBQWxCLENBQThCQyxJQUE5QixDQUFtQyxLQUFLcEgsWUFBeEMsQ0FBbkI7QUFDQSxPQUFLcUgsY0FBTCxHQUFzQixJQUF0QjtBQUNELENBSkQ7O0FBVUF4SCxRQUFRLENBQUN5SCxtQkFBVCxHQUErQixrQkFBa0I7QUFDL0MsU0FBTyxNQUFNLEtBQUt0SCxZQUFMLENBQWtCQyxPQUFsQixDQUEwQkMsT0FBMUIsQ0FBa0MscUJBQWxDLEVBQXlELEtBQXpELENBQWI7QUFDRCxDQUZEOztBQWtCQUwsUUFBUSxDQUFDMEgsVUFBVCxHQUFzQixlQUFlQSxVQUFmLENBQTJCMUYsSUFBSSxHQUFHLEVBQWxDLEVBQXNDO0FBQzFELFFBQU07QUFDSjJGLElBQUFBO0FBREksTUFFRjNGLElBRko7O0FBR0EsTUFBSU4sZ0JBQUVrRyxXQUFGLENBQWNELElBQWQsQ0FBSixFQUF5QjtBQUN2QjdHLG9CQUFJcUIsYUFBSixDQUFtQixrQ0FBbkI7QUFDRDs7QUFDRCxTQUFPLE1BQU0sS0FBSzVCLEdBQUwsQ0FBU3NILFdBQVQsQ0FBcUJGLElBQXJCLENBQWI7QUFDRCxDQVJEOztBQVVBRyxNQUFNLENBQUNDLE1BQVAsQ0FBY2hJLFVBQWQsRUFBMEJDLFFBQTFCLEVBQW9DQyxPQUFwQztlQUVlRixVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBsb2cgZnJvbSAnLi4vbG9nZ2VyJztcbmltcG9ydCB7IGVycm9ycywgQkFTRURSSVZFUl9IQU5ETEVEX1NFVFRJTkdTLCBXM0NfRUxFTUVOVF9LRVkgfSBmcm9tICdhcHBpdW0tYmFzZS1kcml2ZXInO1xuaW1wb3J0IHsgZnMsIHRlbXBEaXIsIHV0aWwgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5cbmxldCBleHRlbnNpb25zID0ge30sXG4gICAgY29tbWFuZHMgPSB7fSxcbiAgICBoZWxwZXJzID0ge307XG5cbmNvbW1hbmRzLmdldFBhZ2VTb3VyY2UgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBhd2FpdCB0aGlzLnVpYXV0b21hdG9yMi5qd3Byb3h5LmNvbW1hbmQoJy9zb3VyY2UnLCAnR0VUJywge30pO1xufTtcblxuY29tbWFuZHMuZ2V0Q2xpcGJvYXJkID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gKGF3YWl0IHRoaXMuYWRiLmdldEFwaUxldmVsKCkgPCAyOSlcbiAgICA/IChhd2FpdCB0aGlzLnVpYXV0b21hdG9yMi5qd3Byb3h5LmNvbW1hbmQoJy9hcHBpdW0vZGV2aWNlL2dldF9jbGlwYm9hcmQnLCAnUE9TVCcsIHt9KSlcbiAgICA6IChhd2FpdCB0aGlzLmFkYi5nZXRDbGlwYm9hcmQoKSk7XG59O1xuXG4vLyBOZWVkIHRvIG92ZXJyaWRlIHRoaXMgZm9yIGNvcnJlY3QgdW5pY29kZSBzdXBwb3J0XG5jb21tYW5kcy5kb1NlbmRLZXlzID0gYXN5bmMgZnVuY3Rpb24gKHBhcmFtcykge1xuICBhd2FpdCB0aGlzLnVpYXV0b21hdG9yMi5qd3Byb3h5LmNvbW1hbmQoJy9rZXlzJywgJ1BPU1QnLCBwYXJhbXMpO1xufTtcblxuLy8gdWlhdXRvbWF0b3IyIGRvZXNuJ3Qgc3VwcG9ydCBtZXRhc3RhdGUgZm9yIGtleWV2ZW50c1xuY29tbWFuZHMua2V5ZXZlbnQgPSBhc3luYyBmdW5jdGlvbiAoa2V5Y29kZSwgbWV0YXN0YXRlKSB7XG4gIGxvZy5kZWJ1ZyhgSWdub3JpbmcgbWV0YXN0YXRlICR7bWV0YXN0YXRlfWApO1xuICBhd2FpdCB0aGlzLmFkYi5rZXlldmVudChrZXljb2RlKTtcbn07XG5cbi8vIFVzZSBBREIgc2luY2Ugd2UgZG9uJ3QgaGF2ZSBVaUF1dG9tYXRvclxuY29tbWFuZHMuYmFjayA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgYXdhaXQgdGhpcy5hZGIua2V5ZXZlbnQoNCk7XG59O1xuXG5jb21tYW5kcy5nZXRTdHJpbmdzID0gYXN5bmMgZnVuY3Rpb24gKGxhbmd1YWdlKSB7XG4gIGlmICghbGFuZ3VhZ2UpIHtcbiAgICBsYW5ndWFnZSA9IGF3YWl0IHRoaXMuYWRiLmdldERldmljZUxhbmd1YWdlKCk7XG4gICAgbG9nLmluZm8oYE5vIGxhbmd1YWdlIHNwZWNpZmllZCwgcmV0dXJuaW5nIHN0cmluZ3MgZm9yOiAke2xhbmd1YWdlfWApO1xuICB9XG5cbiAgLy8gQ2xpZW50cyByZXF1aXJlIHRoZSByZXN1bHRpbmcgbWFwcGluZyB0byBoYXZlIGJvdGgga2V5c1xuICAvLyBhbmQgdmFsdWVzIG9mIHR5cGUgc3RyaW5nXG4gIGNvbnN0IHByZXByb2Nlc3NTdHJpbmdzTWFwID0gZnVuY3Rpb24gKG1hcHBpbmcpIHtcbiAgICBjb25zdCByZXN1bHQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBfLnRvUGFpcnMobWFwcGluZykpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gXy5pc1N0cmluZyh2YWx1ZSkgPyB2YWx1ZSA6IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICBpZiAodGhpcy5hcGtTdHJpbmdzW2xhbmd1YWdlXSkge1xuICAgIC8vIFJldHVybiBjYWNoZWQgc3RyaW5nc1xuICAgIHJldHVybiBwcmVwcm9jZXNzU3RyaW5nc01hcCh0aGlzLmFwa1N0cmluZ3NbbGFuZ3VhZ2VdKTtcbiAgfVxuXG4gIGlmICghdGhpcy5vcHRzLmFwcCAmJiAhdGhpcy5vcHRzLmFwcFBhY2thZ2UpIHtcbiAgICBsb2cuZXJyb3JBbmRUaHJvdyhcIk9uZSBvZiAnYXBwJyBvciAnYXBwUGFja2FnZScgY2FwYWJpbGl0aWVzIHNob3VsZCBtdXN0IGJlIHNwZWNpZmllZFwiKTtcbiAgfVxuXG4gIGxldCBhcHAgPSB0aGlzLm9wdHMuYXBwO1xuICBjb25zdCB0bXBSb290ID0gYXdhaXQgdGVtcERpci5vcGVuRGlyKCk7XG4gIHRyeSB7XG4gICAgaWYgKCFhcHApIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGFwcCA9IGF3YWl0IHRoaXMuYWRiLnB1bGxBcGsodGhpcy5vcHRzLmFwcFBhY2thZ2UsIHRtcFJvb3QpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGxvZy5lcnJvckFuZFRocm93KGBGYWlsZWQgdG8gcHVsbCBhbiBhcGsgZnJvbSAnJHt0aGlzLm9wdHMuYXBwUGFja2FnZX0nLiBPcmlnaW5hbCBlcnJvcjogJHtlcnIubWVzc2FnZX1gKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIWF3YWl0IGZzLmV4aXN0cyhhcHApKSB7XG4gICAgICBsb2cuZXJyb3JBbmRUaHJvdyhgVGhlIGFwcCBhdCAnJHthcHB9JyBkb2VzIG5vdCBleGlzdGApO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBjb25zdCB7YXBrU3RyaW5nc30gPSBhd2FpdCB0aGlzLmFkYi5leHRyYWN0U3RyaW5nc0Zyb21BcGsoYXBwLCBsYW5ndWFnZSwgdG1wUm9vdCk7XG4gICAgICB0aGlzLmFwa1N0cmluZ3NbbGFuZ3VhZ2VdID0gYXBrU3RyaW5ncztcbiAgICAgIHJldHVybiBwcmVwcm9jZXNzU3RyaW5nc01hcChhcGtTdHJpbmdzKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGxvZy5lcnJvckFuZFRocm93KGBDYW5ub3QgZXh0cmFjdCBzdHJpbmdzIGZyb20gJyR7YXBwfScuIE9yaWdpbmFsIGVycm9yOiAke2Vyci5tZXNzYWdlfWApO1xuICAgIH1cbiAgfSBmaW5hbGx5IHtcbiAgICBhd2FpdCBmcy5yaW1yYWYodG1wUm9vdCk7XG4gIH1cbn07XG5cbi8vIG1lbW9pemVkIGluIGNvbnN0cnVjdG9yXG5jb21tYW5kcy5nZXRXaW5kb3dTaXplID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gYXdhaXQgdGhpcy51aWF1dG9tYXRvcjIuandwcm94eS5jb21tYW5kKCcvd2luZG93L2N1cnJlbnQvc2l6ZScsICdHRVQnLCB7fSk7XG59O1xuXG4vLyBGb3IgVzNDXG5jb21tYW5kcy5nZXRXaW5kb3dSZWN0ID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICBjb25zdCB7d2lkdGgsIGhlaWdodH0gPSBhd2FpdCB0aGlzLmdldFdpbmRvd1NpemUoKTtcbiAgcmV0dXJuIHtcbiAgICB3aWR0aCxcbiAgICBoZWlnaHQsXG4gICAgeDogMCxcbiAgICB5OiAwLFxuICB9O1xufTtcblxuZXh0ZW5zaW9ucy5leGVjdXRlTW9iaWxlID0gYXN5bmMgZnVuY3Rpb24gKG1vYmlsZUNvbW1hbmQsIG9wdHMgPSB7fSkge1xuICBjb25zdCBtb2JpbGVDb21tYW5kc01hcHBpbmcgPSB7XG4gICAgc2hlbGw6ICdtb2JpbGVTaGVsbCcsXG5cbiAgICBleGVjRW11Q29uc29sZUNvbW1hbmQ6ICdtb2JpbGVFeGVjRW11Q29uc29sZUNvbW1hbmQnLFxuXG4gICAgc2Nyb2xsQmFja1RvOiAnbW9iaWxlU2Nyb2xsQmFja1RvJyxcbiAgICBzY3JvbGw6ICdtb2JpbGVTY3JvbGwnLFxuICAgIHZpZXdwb3J0U2NyZWVuc2hvdDogJ21vYmlsZVZpZXdwb3J0U2NyZWVuc2hvdCcsXG5cbiAgICBkZWVwTGluazogJ21vYmlsZURlZXBMaW5rJyxcblxuICAgIHN0YXJ0TG9nc0Jyb2FkY2FzdDogJ21vYmlsZVN0YXJ0TG9nc0Jyb2FkY2FzdCcsXG4gICAgc3RvcExvZ3NCcm9hZGNhc3Q6ICdtb2JpbGVTdG9wTG9nc0Jyb2FkY2FzdCcsXG5cbiAgICBhY2NlcHRBbGVydDogJ21vYmlsZUFjY2VwdEFsZXJ0JyxcbiAgICBkaXNtaXNzQWxlcnQ6ICdtb2JpbGVEaXNtaXNzQWxlcnQnLFxuXG4gICAgYmF0dGVyeUluZm86ICdtb2JpbGVHZXRCYXR0ZXJ5SW5mbycsXG5cbiAgICBkZXZpY2VJbmZvOiAnbW9iaWxlR2V0RGV2aWNlSW5mbycsXG5cbiAgICBnZXREZXZpY2VUaW1lOiAnbW9iaWxlR2V0RGV2aWNlVGltZScsXG5cbiAgICBjaGFuZ2VQZXJtaXNzaW9uczogJ21vYmlsZUNoYW5nZVBlcm1pc3Npb25zJyxcbiAgICBnZXRQZXJtaXNzaW9uczogJ21vYmlsZUdldFBlcm1pc3Npb25zJyxcblxuICAgIHBlcmZvcm1FZGl0b3JBY3Rpb246ICdtb2JpbGVQZXJmb3JtRWRpdG9yQWN0aW9uJyxcblxuICAgIHN0YXJ0U2NyZWVuU3RyZWFtaW5nOiAnbW9iaWxlU3RhcnRTY3JlZW5TdHJlYW1pbmcnLFxuICAgIHN0b3BTY3JlZW5TdHJlYW1pbmc6ICdtb2JpbGVTdG9wU2NyZWVuU3RyZWFtaW5nJyxcblxuICAgIGdldE5vdGlmaWNhdGlvbnM6ICdtb2JpbGVHZXROb3RpZmljYXRpb25zJyxcblxuICAgIGxpc3RTbXM6ICdtb2JpbGVMaXN0U21zJyxcblxuICAgIHR5cGU6ICdtb2JpbGVUeXBlJyxcbiAgICBzZW5zb3JTZXQ6ICdzZW5zb3JTZXQnLFxuXG4gICAgZGVsZXRlRmlsZTogJ21vYmlsZURlbGV0ZUZpbGUnLFxuICB9O1xuXG4gIGlmICghXy5oYXMobW9iaWxlQ29tbWFuZHNNYXBwaW5nLCBtb2JpbGVDb21tYW5kKSkge1xuICAgIHRocm93IG5ldyBlcnJvcnMuVW5rbm93bkNvbW1hbmRFcnJvcihgVW5rbm93biBtb2JpbGUgY29tbWFuZCBcIiR7bW9iaWxlQ29tbWFuZH1cIi4gYCArXG4gICAgICBgT25seSAke18ua2V5cyhtb2JpbGVDb21tYW5kc01hcHBpbmcpfSBjb21tYW5kcyBhcmUgc3VwcG9ydGVkLmApO1xuICB9XG4gIHJldHVybiBhd2FpdCB0aGlzW21vYmlsZUNvbW1hbmRzTWFwcGluZ1ttb2JpbGVDb21tYW5kXV0ob3B0cyk7XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFNjcm9sbEVsZW1lbnRUb0VsZW1lbnRPcHRzXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZWxlbWVudElkIFRoZSBpZGVudGlmaWVyIG9mIHRoZSBzY3JvbGxhYmxlIGVsZW1lbnQsXG4gKiB3aGljaCBpcyBnb2luZyB0byBiZSBzY3JvbGxlZC4gSXQgaXMgcmVxdWlyZWQgdGhpcyBlbGVtZW50XG4gKiBpcyBhIHZhbGlkIHNjcm9sbGFibGUgY29udGFpbmVyIGFuZCBpdCB3YXMgbG9jYXRlZCBieSBgLWFuZHJvaWQgdWlhdXRvbWF0b3JgXG4gKiBzdHJhdGVneS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBlbGVtZW50VG9JZCBUaGUgaWRlbnRpZmllciBvZiB0aGUgaXRlbSwgd2hpY2ggYmVsb25nc1xuICogdG8gdGhlIHNjcm9sbGFibGUgZWxlbWVudCBhYm92ZSwgYW5kIHdoaWNoIHNob3VsZCBiZWNvbWUgdmlzaWJsZSBhZnRlclxuICogdGhlIHNjcm9sbGluZyBvcGVyYXRpb24gaXMgZmluaXNoZWQuIEl0IGlzIHJlcXVpcmVkIHRoaXMgZWxlbWVudFxuICogd2FzIGxvY2F0ZWQgYnkgYC1hbmRyb2lkIHVpYXV0b21hdG9yYCBzdHJhdGVneS5cbiAqL1xuXG4vKipcbiAqIFNjcm9sbHMgdGhlIGdpdmVuIHNjcm9sbGFibGUgZWxlbWVudCBgZWxlbWVudElkYCB1bnRpbCBgZWxlbWVudFRvSWRgXG4gKiBiZWNvbWVzIHZpc2libGUuIFRoaXMgZnVuY3Rpb24gcmV0dXJucyBpbW1lZGlhdGVseSBpZiB0aGUgYGVsZW1lbnRUb0lkYFxuICogaXMgYWxyZWFkeSB2aXNpYmxlIGluIHRoZSB2aWV3IHBvcnQuIE90aGVyd2lzZSBpdCB3b3VsZCBzY3JvbGxcbiAqIHRvIHRoZSB2ZXJ5IGJlZ2lubmluZyBvZiB0aGUgc2Nyb2xsYWJsZSBjb250cm9sIGFuZCB0cmllcyB0byByZWFjaCB0aGUgZGVzdGluYXRpb24gZWxlbWVudFxuICogYnkgc2Nyb2xsaW5nIGl0cyBwYXJlbnQgdG8gdGhlIGVuZCBzdGVwIGJ5IHN0ZXAuIFRoZSBzY3JvbGwgZGlyZWN0aW9uICh2ZXJ0aWNhbCBvciBob3Jpem9udGFsKVxuICogaXMgZGV0ZWN0ZWQgYXV0b21hdGljYWxseS5cbiAqXG4gKiBAcGFyYW0ge1Njcm9sbEVsZW1lbnRUb0VsZW1lbnRPcHRzfSBvcHRzXG4gKiBAdGhyb3dzIHtFcnJvcn0gaWYgdGhlIHNjcm9sbGluZyBvcGVyYXRpb24gY2Fubm90IGJlIHBlcmZvcm1lZFxuICovXG5jb21tYW5kcy5tb2JpbGVTY3JvbGxCYWNrVG8gPSBhc3luYyBmdW5jdGlvbiAob3B0cyA9IHt9KSB7XG4gIGNvbnN0IHtlbGVtZW50SWQsIGVsZW1lbnRUb0lkfSA9IG9wdHM7XG4gIGlmICghZWxlbWVudElkIHx8ICFlbGVtZW50VG9JZCkge1xuICAgIGxvZy5lcnJvckFuZFRocm93KGBCb3RoIGVsZW1lbnRJZCBhbmQgZWxlbWVudFRvSWQgYXJndW1lbnRzIG11c3QgYmUgcHJvdmlkZWRgKTtcbiAgfVxuICByZXR1cm4gYXdhaXQgdGhpcy51aWF1dG9tYXRvcjIuandwcm94eS5jb21tYW5kKFxuICAgIGAvYXBwaXVtL2VsZW1lbnQvJHt1dGlsLnVud3JhcEVsZW1lbnQoZWxlbWVudElkKX0vc2Nyb2xsX3RvLyR7dXRpbC51bndyYXBFbGVtZW50KGVsZW1lbnRUb0lkKX1gLCAnUE9TVCcsIHt9KTtcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gU2Nyb2xsT3B0c1xuICogQHByb3BlcnR5IHs/c3RyaW5nfSBlbGVtZW50IFRoZSBpZGVudGlmaWVyIG9mIGFuIGVsZW1lbnQuIEl0IGlzIHJlcXVpcmVkIHRoaXMgZWxlbWVudFxuICogaXMgYSB2YWxpZCBzY3JvbGxhYmxlIGNvbnRhaW5lciBhbmQgaXQgd2FzIGxvY2F0ZWQgYnkgYC1hbmRyb2lkIHVpYXV0b21hdG9yYFxuICogc3RyYXRlZ3kuIElmIHRoaXMgcHJvcGVydHkgaXMgbm90IHByb3ZpZGVkIHRoZW4gdGhlIGZpcnN0IGN1cnJlbnRseSBhdmFpbGFibGUgc2Nyb2xsYWJsZSB2aWV3XG4gKiBpcyBzZWxlY3RlZCBmb3IgdGhlIGludGVyYWN0aW9uLlxuICogQHByb3BlcnR5IHshc3RyaW5nfSBzdHJhdGVneSBUaGUgZm9sbG93aW5nIHN0cmF0ZWdpZXMgYXJlIHN1cHBvcnRlZDpcbiAqIC0gYGFjY2Vzc2liaWxpdHkgaWRgIChVaVNlbGVjdG9yKCkuZGVzY3JpcHRpb24pXG4gKiAtIGBjbGFzcyBuYW1lYCAoVWlTZWxlY3RvcigpLmNsYXNzTmFtZSlcbiAqIC0gYC1hbmRyb2lkIHVpYXV0b21hdG9yYCAoVWlTZWxlY3RvcilcbiAqIEBwcm9wZXJ0eSB7IXN0cmluZ30gc2VsZWN0b3IgVGhlIGNvcnJlc3BvbmRpbmcgbG9va3VwIHZhbHVlIGZvciB0aGUgZ2l2ZW5cbiAqIHN0cmF0ZWd5LlxuICogQHByb3BlcnR5IHs/bnVtYmVyfSBtYXhTd2lwZXMgVGhlIG1heGltdW0gbnVtYmVyIG9mIHN3aXBlcyB0byBwZXJmb3JtXG4gKiBvbiB0aGUgdGFyZ2V0IHNjcm9sbGFibGUgdmlldyBpbiBvcmRlciB0byByZWFjaCB0aGUgZGVzdGluYXRpb24gZWxlbWVudC5cbiAqIEluIGNhc2UgdGhpcyB2YWx1ZSBpcyB1bnNldCB0aGVuIGl0IHdvdWxkIGJlIHJldHJpZXZlZCBmcm9tIHRoZSBzY3JvbGxhYmxlXG4gKiBlbGVtZW50IGl0c2VsZiAodnVhIGBnZXRNYXhTZWFyY2hTd2lwZXMoKWAgcHJvcGVydHkpLlxuICovXG5cbi8qKlxuICogU2Nyb2xscyB0aGUgZ2l2ZW4gc2Nyb2xsYWJsZSBlbGVtZW50IHVudGlsIHRoZSBlbGVtZW50IGlkZW50aWZpZWRcbiAqIGJ5IGBzdHJhdGVneWAgYW5kIGBzZWxlY3RvcmAgYmVjb21lcyB2aXNpYmxlLiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgaW1tZWRpYXRlbHkgaWYgdGhlXG4gKiBkZXN0aW5hdGlvbiBlbGVtZW50IGlzIGFscmVhZHkgdmlzaWJsZSBpbiB0aGUgdmlldyBwb3J0LiBPdGhlcndpc2UgaXQgd291bGQgc2Nyb2xsXG4gKiB0byB0aGUgdmVyeSBiZWdpbm5pbmcgb2YgdGhlIHNjcm9sbGFibGUgY29udHJvbCBhbmQgdHJpZXMgdG8gcmVhY2ggdGhlIGRlc3RpbmF0aW9uIGVsZW1lbnRcbiAqIGJ5IHNjcm9sbGluZyBpdHMgcGFyZW50IHRvIHRoZSBlbmQgc3RlcCBieSBzdGVwLiBUaGUgc2Nyb2xsIGRpcmVjdGlvbiAodmVydGljYWwgb3IgaG9yaXpvbnRhbClcbiAqIGlzIGRldGVjdGVkIGF1dG9tYXRpY2FsbHkuXG4gKlxuICogQHBhcmFtIHtTY3JvbGxPcHRzfSBvcHRzXG4gKiBAdGhyb3dzIHtFcnJvcn0gaWYgdGhlIHNjcm9sbGluZyBvcGVyYXRpb24gY2Fubm90IGJlIHBlcmZvcm1lZFxuICovXG5jb21tYW5kcy5tb2JpbGVTY3JvbGwgPSBhc3luYyBmdW5jdGlvbiAob3B0cyA9IHt9KSB7XG4gIGNvbnN0IHtlbGVtZW50LCBzdHJhdGVneSwgc2VsZWN0b3IsIG1heFN3aXBlc30gPSBvcHRzO1xuICBpZiAoIXN0cmF0ZWd5IHx8ICFzZWxlY3Rvcikge1xuICAgIGxvZy5lcnJvckFuZFRocm93KGBCb3RoIHN0cmF0ZWd5IGFuZCBzZWxlY3RvciBhcmd1bWVudHMgbXVzdCBiZSBwcm92aWRlZGApO1xuICB9XG4gIGNvbnN0IHBhcmFtcyA9IHtcbiAgICBwYXJhbXM6IHtzdHJhdGVneSwgc2VsZWN0b3IsIG1heFN3aXBlc30sXG4gIH07XG4gIGlmIChlbGVtZW50KSB7XG4gICAgcGFyYW1zLm9yaWdpbiA9IHtcbiAgICAgIFtXM0NfRUxFTUVOVF9LRVldOiB1dGlsLnVud3JhcEVsZW1lbnQoZWxlbWVudCksXG4gICAgfTtcbiAgfVxuICByZXR1cm4gYXdhaXQgdGhpcy51aWF1dG9tYXRvcjIuandwcm94eS5jb21tYW5kKGAvYXBwaXVtL3RvdWNoL3Njcm9sbGAsICdQT1NUJywgcGFyYW1zKTtcbn07XG5cbmNvbW1hbmRzLm1vYmlsZVZpZXdwb3J0U2NyZWVuc2hvdCA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGF3YWl0IHRoaXMuZ2V0Vmlld3BvcnRTY3JlZW5zaG90KCk7XG59O1xuXG5jb21tYW5kcy5zZXRVcmwgPSBhc3luYyBmdW5jdGlvbiAodXJsKSB7XG4gIGF3YWl0IHRoaXMuYWRiLnN0YXJ0VXJpKHVybCwgdGhpcy5vcHRzLmFwcFBhY2thZ2UpO1xufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7b2JqZWN0fSBEZWVwTGlua09wdHNcbiAqIEBwcm9wZXJ0eSB7IXN0cmluZ30gdXJsIC0gVGhlIG5hbWUgb2YgVVJMIHRvIHN0YXJ0LlxuICogQHByb3BlcnR5IHshc3RyaW5nfSBwYWNrYWdlIC0gVGhlIG5hbWUgb2YgdGhlIHBhY2thZ2UgdG8gc3RhcnQgdGhlIFVSSSB3aXRoLlxuICogQHByb3BlcnR5IHs/Ym9vbGVhbn0gd2FpdEZvckxhdW5jaCBbdHJ1ZV0gLSBpZiBgZmFsc2VgIHRoZW4gYWRiIHdvbid0IHdhaXRcbiAqIGZvciB0aGUgc3RhcnRlZCBhY3Rpdml0eSB0byByZXR1cm4gdGhlIGNvbnRyb2xcbiAqL1xuXG4vKipcbiAqIFN0YXJ0IFVSTCB0aGF0IHRha2UgdXNlcnMgZGlyZWN0bHkgdG8gc3BlY2lmaWMgY29udGVudCBpbiB0aGUgYXBwXG4gKiBAcGFyYW0ge0RlZXBMaW5rT3B0c30gb3B0c1xuICovXG5jb21tYW5kcy5tb2JpbGVEZWVwTGluayA9IGFzeW5jIGZ1bmN0aW9uIChvcHRzID0ge30pIHtcbiAgY29uc3Qge1xuICAgIHVybCxcbiAgICBwYWNrYWdlOiBwa2csXG4gICAgd2FpdEZvckxhdW5jaCxcbiAgfSA9IG9wdHM7XG4gIHJldHVybiBhd2FpdCB0aGlzLmFkYi5zdGFydFVyaSh1cmwsIHBrZywgeyB3YWl0Rm9yTGF1bmNoIH0pO1xufTtcblxuY29tbWFuZHMub3Blbk5vdGlmaWNhdGlvbnMgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBhd2FpdCB0aGlzLnVpYXV0b21hdG9yMi5qd3Byb3h5LmNvbW1hbmQoJy9hcHBpdW0vZGV2aWNlL29wZW5fbm90aWZpY2F0aW9ucycsICdQT1NUJywge30pO1xufTtcblxuY29tbWFuZHMudXBkYXRlU2V0dGluZ3MgPSBhc3luYyBmdW5jdGlvbiAoc2V0dGluZ3MpIHtcbiAgLy8gd2UgaGF2ZSBzb21lIHNldHRpbmdzIHRoYXQgYXJlIHNldCBvbiB0aGUgc2V0dGluZ3Mgb2JqZWN0IGluIHRoZSBkcml2ZXJcbiAgLy8gb25seSwgZm9yIGV4YW1wbGUgaW1hZ2UgZmluZGluZyBzZXR0aW5ncy4gVGhlIHVpYXV0bzIgc2VydmVyIGRvZXMgbm90IGtub3dcbiAgLy8gd2hhdCB0byBkbyB3aXRoIHRoZW0sIHNvIGp1c3Qgc2V0IHRoZW0gb24gdGhpcyBkcml2ZXIncyBzZXR0aW5ncyBpbnN0YW5jZSxcbiAgLy8gYW5kIGRvbid0IGZvcndhcmQgdGhlbSB0byB0aGUgc2VydmVyXG4gIGxldCBkcml2ZXJPbmx5U2V0dGluZ3MgPSB7fTtcbiAgbGV0IHNlcnZlclNldHRpbmdzID0ge307XG4gIGZvciAobGV0IFtzZXR0aW5nLCB2YWx1ZV0gb2YgXy50b1BhaXJzKHNldHRpbmdzKSkge1xuICAgIGlmIChCQVNFRFJJVkVSX0hBTkRMRURfU0VUVElOR1MuaW5jbHVkZXMoc2V0dGluZykpIHtcbiAgICAgIGRyaXZlck9ubHlTZXR0aW5nc1tzZXR0aW5nXSA9IHZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXJ2ZXJTZXR0aW5nc1tzZXR0aW5nXSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuICBpZiAoIV8uaXNFbXB0eShkcml2ZXJPbmx5U2V0dGluZ3MpKSB7XG4gICAgbG9nLmluZm8oYEZvdW5kIHNvbWUgc2V0dGluZ3MgZGVzaWduZWQgdG8gYmUgaGFuZGxlZCBieSBCYXNlRHJpdmVyOiBgICtcbiAgICAgICAgICAgICBgJHtKU09OLnN0cmluZ2lmeShfLmtleXMoZHJpdmVyT25seVNldHRpbmdzKSl9LiBOb3QgYCArXG4gICAgICAgICAgICAgYHNlbmRpbmcgdGhlc2Ugb24gdG8gdGhlIFVpQXV0b21hdG9yMiBzZXJ2ZXIgYW5kIGluc3RlYWQgYCArXG4gICAgICAgICAgICAgYHNldHRpbmcgZGlyZWN0bHkgb24gdGhlIGRyaXZlcmApO1xuICAgIGF3YWl0IHRoaXMuc2V0dGluZ3MudXBkYXRlKGRyaXZlck9ubHlTZXR0aW5ncyk7XG4gIH1cbiAgaWYgKCFfLmlzRW1wdHkoc2VydmVyU2V0dGluZ3MpKSB7XG4gICAgbG9nLmluZm8oJ0ZvcndhcmRpbmcgdGhlIGZvbGxvd2luZyBzZXR0aW5ncyB0byB0aGUgVWlBdXRvbWF0b3IyIHNlcnZlcjogJyArXG4gICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkoXy5rZXlzKHNlcnZlclNldHRpbmdzKSkpO1xuICAgIGF3YWl0IHRoaXMudWlhdXRvbWF0b3IyLmp3cHJveHkuY29tbWFuZCgnL2FwcGl1bS9zZXR0aW5ncycsICdQT1NUJyxcbiAgICAgIHtzZXR0aW5nczogc2VydmVyU2V0dGluZ3N9KTtcbiAgfVxufTtcblxuY29tbWFuZHMuZ2V0U2V0dGluZ3MgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIC8vIGFzIGFib3ZlLCB3ZSBtaWdodCBoYXZlIHNvbWUgZHJpdmVyLW9ubHkgc2V0dGluZ3MgdG8gcmV0dXJuIGFzIHdlbGxcbiAgY29uc3QgZHJpdmVyT25seVNldHRpbmdzID0gdGhpcy5zZXR0aW5ncy5nZXRTZXR0aW5ncygpO1xuICBjb25zdCBzZXJ2ZXJTZXR0aW5ncyA9IGF3YWl0IHRoaXMudWlhdXRvbWF0b3IyLmp3cHJveHkuY29tbWFuZCgnL2FwcGl1bS9zZXR0aW5ncycsICdHRVQnKTtcbiAgcmV0dXJuIHsuLi5kcml2ZXJPbmx5U2V0dGluZ3MsIC4uLnNlcnZlclNldHRpbmdzfTtcbn07XG5cbi8qKlxuICogT3ZlcnJpZGluZyBhcHBpdW0tYW5kcm9pZC1kcml2ZXIncyB3cmFwQm9vdHN0cmFwRGlzY29ubmVjdCxcbiAqIHVubGlrZSBpbiBhcHBpdW0tYW5kcm9pZC1kcml2ZXIgYXZvaWRpbmcgYWRiIHJlc3RhcnRpbmcgYXMgaXQgaW50ZXJuXG4gKiBraWxscyBVaUF1dG9tYXRvcjIgc2VydmVyIHJ1bm5pbmcgaW4gdGhlIGRldmljZS5cbiAqKi9cbmhlbHBlcnMud3JhcEJvb3RzdHJhcERpc2Nvbm5lY3QgPSBhc3luYyBmdW5jdGlvbiAod3JhcHBlZCkge1xuICBhd2FpdCB3cmFwcGVkKCk7XG59O1xuXG4vLyBTdG9wIHByb3h5aW5nIHRvIGFueSBDaHJvbWVkcml2ZXIgYW5kIHJlZGlyZWN0IHRvIHVpYXV0b21hdG9yMlxuaGVscGVycy5zdXNwZW5kQ2hyb21lZHJpdmVyUHJveHkgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuY2hyb21lZHJpdmVyID0gbnVsbDtcbiAgdGhpcy5wcm94eVJlcVJlcyA9IHRoaXMudWlhdXRvbWF0b3IyLnByb3h5UmVxUmVzLmJpbmQodGhpcy51aWF1dG9tYXRvcjIpO1xuICB0aGlzLmp3cFByb3h5QWN0aXZlID0gdHJ1ZTtcbn07XG5cbi8qKlxuICogVGhlIGxpc3Qgb2YgYXZhaWxhYmxlIGluZm8gZW50cmllcyBjYW4gYmUgZm91bmQgYXRcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hcHBpdW0vYXBwaXVtLXVpYXV0b21hdG9yMi1zZXJ2ZXIvYmxvYi9tYXN0ZXIvYXBwL3NyYy9tYWluL2phdmEvaW8vYXBwaXVtL3VpYXV0b21hdG9yMi9oYW5kbGVyL0dldERldmljZUluZm8uamF2YVxuICovXG5jb21tYW5kcy5tb2JpbGVHZXREZXZpY2VJbmZvID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gYXdhaXQgdGhpcy51aWF1dG9tYXRvcjIuandwcm94eS5jb21tYW5kKCcvYXBwaXVtL2RldmljZS9pbmZvJywgJ0dFVCcpO1xufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBUeXBpbmdPcHRpb25zXG4gKiBAcHJvcGVydHkgeyFzdHJpbmd8bnVtYmVyfGJvb2xlYW59IHRleHQgLSBUaGUgdGV4dCB0byB0eXBlXG4gKi9cblxuLyoqXG4gKiBUeXBlcyB0aGUgZ2l2ZW4gVW5pY29kZSBzdHJpbmcuXG4gKiBJdCBpcyBleHBlY3RlZCB0aGF0IHRoZSBmb2N1cyBpcyBhbHJlYWR5IHB1dFxuICogdG8gdGhlIGRlc3RpbmF0aW9uIGlucHV0IGZpZWxkIGJlZm9yZSB0aGlzIG1ldGhvZCBpcyBjYWxsZWQuXG4gKlxuICogQHBhcmFtIHtUeXBpbmdPcHRpb25zfSBvcHRzXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gYHRydWVgIGlmIHRoZSBpbnB1dCB0ZXh0IGhhcyBiZWVuIHN1Y2Nlc3NmdWxseSBzZW50IHRvIGFkYlxuICogQHRocm93cyB7RXJyb3J9IGlmIGB0ZXh0YCBwcm9wZXJ0eSBoYXMgbm90IGJlZW4gcHJvdmlkZWRcbiAqL1xuY29tbWFuZHMubW9iaWxlVHlwZSA9IGFzeW5jIGZ1bmN0aW9uIG1vYmlsZVR5cGUgKG9wdHMgPSB7fSkge1xuICBjb25zdCB7XG4gICAgdGV4dCxcbiAgfSA9IG9wdHM7XG4gIGlmIChfLmlzVW5kZWZpbmVkKHRleHQpKSB7XG4gICAgbG9nLmVycm9yQW5kVGhyb3coYFRoZSAndGV4dCcgYXJndW1lbnQgaXMgbWFuZGF0b3J5YCk7XG4gIH1cbiAgcmV0dXJuIGF3YWl0IHRoaXMuYWRiLnR5cGVVbmljb2RlKHRleHQpO1xufTtcblxuT2JqZWN0LmFzc2lnbihleHRlbnNpb25zLCBjb21tYW5kcywgaGVscGVycyk7XG5cbmV4cG9ydCBkZWZhdWx0IGV4dGVuc2lvbnM7XG4iXSwiZmlsZSI6ImxpYi9jb21tYW5kcy9nZW5lcmFsLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
